bool test_all()
{
        DMFT::Config conf(beta, U/2.0, U, DMFT::_CONFIG_maxMatsFreq, DMFT::_CONFIG_maxTBins, world, local, isGenerator); 
        DMFT::Segments<2> s(conf);
        LOG(INFO) << s.maxl(2, 0) << " (02,08): " << s.insertSegment(2, 8, 0);
        LOG(INFO) << s.maxl(1, 0) << " (01,08): "  << s.insertSegment(1, 8, 0);
        LOG(INFO) << s.maxl(6, 0) << " (06,09): "  << s.insertSegment(6, 9, 0);
        LOG(INFO) << s.maxl(10, 0) << " (10,23): "  << s.insertSegment(10,23, 0);
        LOG(INFO) << s.maxl(9, 0) << " (9,15): "  << s.insertSegment(9,15, 0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << s.maxl(19, 0) << " (19,21): "  << s.insertSegment(19,21, 0);
        LOG(INFO) << s.maxl(10, 0) << " (10,15): "  << s.insertSegment(10,15, 0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << s.maxl(5, 1) << " (5,15): "  << s.insertSegment(5,15, 1);
        LOG(INFO) << s.maxl(18, 1) << " (18,22): "  << s.insertSegment(18,22, 1);
        LOG(INFO) << s.maxl(18, 1) << " (18,22): "  << s.insertSegment(18,22, 1);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "ov (18,19) : " << s.overlap(18,19,1);
        LOG(INFO) << "ov (18,21) : " << s.overlap(18,21,1);
        LOG(INFO) << "ov (20,21) : " << s.overlap(20,21,1);
        LOG(INFO) << "ov (0,1) : " << s.overlap(0,1,1);
        LOG(INFO) << "ov (7,20) : " << s.overlap(7,20,1);
        LOG(INFO) << "ov (18,27) : " << s.overlap(18,27,1);
        //s.deleteSegment(2,0);
        //s.deleteSegmentT(2.1,0);
        LOG(INFO) << "AS: 8.1-8.3";
        s.insertAntiSegment(8.1,8.3,0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "AS: 8.0-8.3";
        s.insertAntiSegment(8.0,8.3,0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "AS: 6.9-8.3: " << s.insertAntiSegment(6.9,8.3,0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "AS: 6.9-7.3: " << s.insertAntiSegment(6.9,7.3,0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "AS: 0.1-0.3: " << s.insertAntiSegment(0.1,0.3,0);
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "AS: 19.1-19.3: " << s.insertAntiSegment(19.1,19.3,0);
        LOG(INFO) << "ov: " << s.overlap();
        LOG(INFO) << s.print_segments();
        //s.deleteSegmentT(0.1,0);
        //s.deleteSegment(0,0);
        LOG(INFO) << "delete AS: 1: " << s.deleteAntiSegment(1,0);
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "delete AS: 8: " << s.deleteAntiSegment(8,0);
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "delete AS: 0: " << s.deleteAntiSegment(0,0);
        LOG(INFO) << s.print_segments();
        LOG(INFO) << "delete AS: 3: " << s.deleteAntiSegment(3,0);
        LOG(INFO) << s.print_segments();
        printf("done \n");
        return true;
}
