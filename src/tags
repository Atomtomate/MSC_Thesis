	Session.vim	/^inoremap   "scrolling on insert$/;"	m
	Session.vim	/^nnoremap  $/;"	m
		Session.vim	/^inoremap <expr> 	 pumvisible() ? "\\" : "\\	"$/;"	m
	Session.vim	/^nnoremap  $/;"	m
	Session.vim	/^nnoremap  $/;"	m
	Session.vim	/^nnoremap <silent>  :call multiple_cursors#new("n", 1)$/;"	m
	Session.vim	/^nnoremap  :w$/;"	m
	Session.vim	/^inoremap  $/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
'[	Session.vim	/^nnoremap <silent> '[ :call signature#mark#Goto("prev", "line", "alpha")$/;"	m
']	Session.vim	/^nnoremap <silent> '] :call signature#mark#Goto("next", "line", "alpha")$/;"	m
,P	Session.vim	/^nnoremap ,P "0p$/;"	m
,P	Session.vim	/^vnoremap ,P "0p$/;"	m
,a	Session.vim	/^nnoremap ,a ggVG$/;"	m
,c	Session.vim	/^nmap ,c  <Plug>NERDCommenterToggle$/;"	m
,c$	Session.vim	/^nmap ,c$ <Plug>NERDCommenterToEOL$/;"	m
,cA	Session.vim	/^nmap ,cA <Plug>NERDCommenterAppend$/;"	m
,ca	Session.vim	/^nmap ,ca <Plug>NERDCommenterAltDelims$/;"	m
,cb	Session.vim	/^nmap ,cb <Plug>NERDCommenterAlignBoth$/;"	m
,cc	Session.vim	/^nmap ,cc <Plug>NERDCommenterComment$/;"	m
,ci	Session.vim	/^nmap ,ci <Plug>NERDCommenterInvert$/;"	m
,cl	Session.vim	/^nmap ,cl <Plug>NERDCommenterAlignLeft$/;"	m
,cm	Session.vim	/^nmap ,cm <Plug>NERDCommenterMinimal$/;"	m
,cn	Session.vim	/^nmap ,cn <Plug>NERDCommenterNested$/;"	m
,cs	Session.vim	/^nmap ,cs <Plug>NERDCommenterSexy$/;"	m
,cu	Session.vim	/^nmap ,cu <Plug>NERDCommenterUncomment$/;"	m
,cy	Session.vim	/^nmap ,cy <Plug>NERDCommenterYank$/;"	m
,d	Session.vim	/^nnoremap ,d :YcmShowDetailedDiagnostic$/;"	m
,hp	Session.vim	/^nmap ,hp <Plug>GitGutterPreviewHunk$/;"	m
,hr	Session.vim	/^nmap ,hr <Plug>GitGutterUndoHunk:echomsg ',hr is deprecated. Use ,hu'$/;"	m
,hs	Session.vim	/^nmap ,hs <Plug>GitGutterStageHunk$/;"	m
,hu	Session.vim	/^nmap ,hu <Plug>GitGutterUndoHunk$/;"	m
,ih	Session.vim	/^imap ,ih :IHS$/;"	m
,ih	Session.vim	/^nmap ,ih :IHS$/;"	m
,ihn	Session.vim	/^imap ,ihn :IHN$/;"	m
,ihn	Session.vim	/^nmap ,ihn :IHN$/;"	m
,is	Session.vim	/^imap ,is :IHS$/;"	m
,is	Session.vim	/^nmap ,is :IHS$/;"	m
,p	Session.vim	/^nnoremap ,p :set paste$/;"	m
,p	Session.vim	/^vnoremap ,p :set paste$/;"	m
,q	Session.vim	/^nmap ,q :q$/;"	m
,sh	Session.vim	/^nnoremap ,sh :nohlsearch|:echo$/;"	m
,w	Session.vim	/^nmap ,w :w!$/;"	m
,y	Session.vim	/^vnoremap ,y "+y$/;"	m
0	Session.vim	/^normal! 0$/;"	m
017|	Session.vim	/^normal! 017|$/;"	m
<C-Space>	Session.vim	/^inoremap <C-Space> $/;"	m
<C-Tab>	Session.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<Down>	Session.vim	/^inoremap <expr> <Down> pumvisible() ? "\\" : "\\<Down>"$/;"	m
<F7>	Session.vim	/^map <F7> mzgg=G`z$/;"	m
<F8>	Session.vim	/^nnoremap <silent> <F8> :NERDTreeToggle$/;"	m
<F9>	Session.vim	/^nnoremap <silent> <F9> :TagbarToggle$/;"	m
<NL>	Session.vim	/^nnoremap <NL> <NL>$/;"	m
<Nul>	Session.vim	/^imap <Nul> <C-Space>$/;"	m
<Plug>GitGutterNextHunk	Session.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\\execute v:count1 . 'GitGutterNextHunk'\\$/;"	m
<Plug>GitGutterPrevHunk	Session.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\\execute v:count1 . 'GitGutterPrevHunk'\\$/;"	m
<Plug>GitGutterPreviewHunk	Session.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk$/;"	m
<Plug>GitGutterStageHunk	Session.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk :GitGutterStageHunk$/;"	m
<Plug>GitGutterTextObjectInnerPending	Session.vim	/^onoremap <silent> <Plug>GitGutterTextObjectInnerPending :call gitgutter#hunk#text_object(1)$/;"	m
<Plug>GitGutterTextObjectOuterPending	Session.vim	/^onoremap <silent> <Plug>GitGutterTextObjectOuterPending :call gitgutter#hunk#text_object(0)$/;"	m
<Plug>GitGutterUndoHunk	Session.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk :GitGutterUndoHunk$/;"	m
<Plug>NERDCommenterAlignBoth	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")$/;"	m
<Plug>NERDCommenterAlignLeft	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")$/;"	m
<Plug>NERDCommenterAppend	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")$/;"	m
<Plug>NERDCommenterComment	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")$/;"	m
<Plug>NERDCommenterInsert	Session.vim	/^inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")$/;"	m
<Plug>NERDCommenterInvert	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")$/;"	m
<Plug>NERDCommenterMinimal	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")$/;"	m
<Plug>NERDCommenterNested	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")$/;"	m
<Plug>NERDCommenterSexy	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")$/;"	m
<Plug>NERDCommenterToEOL	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")$/;"	m
<Plug>NERDCommenterToggle	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")$/;"	m
<Plug>NERDCommenterUncomment	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")$/;"	m
<Plug>NERDCommenterYank	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	Session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<S-Tab>	Session.vim	/^inoremap <expr> <S-Tab> pumvisible() ? "\\" : "\\<S-Tab>"$/;"	m
<SNR>52_:	Session.vim	/^nnoremap <SNR>52_: :=v:count ? v:count : ''$/;"	m
<Up>	Session.vim	/^inoremap <expr> <Up> pumvisible() ? "\\" : "\\<Up>"$/;"	m
ALIGN_CENTER	libs/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_DEFAULT	libs/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_LEFT	libs/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_NUMERIC	libs/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_RIGHT	libs/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
A_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class A_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
AlignSpec	libs/spdlog/fmt/bundled/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fmt::AlignSpec
AlignSpec	libs/spdlog/fmt/bundled/format.h	/^struct AlignSpec : WidthSpec$/;"	s	namespace:fmt
AlignTypeSpec	libs/spdlog/fmt/bundled/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill) : AlignSpec(width, fill) {}$/;"	f	struct:fmt::AlignTypeSpec
AlignTypeSpec	libs/spdlog/fmt/bundled/format.h	/^struct AlignTypeSpec : AlignSpec$/;"	s	namespace:fmt
Alignment	libs/spdlog/fmt/bundled/format.h	/^enum Alignment$/;"	g	namespace:fmt
AllowVerboseIfModuleNotSpecified	easylogging++.h	/^                AllowVerboseIfModuleNotSpecified = 2,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
And	easylogging++.h	/^                                    static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
AppCtx	test.cp	/^} AppCtx;$/;"	t	typeref:struct:__anon1	file:
AppName	easylogging++.h	/^                            User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Arg	libs/spdlog/fmt/bundled/format.h	/^    typedef internal::Arg Arg;$/;"	t	class:fmt::ArgVisitor
Arg	libs/spdlog/fmt/bundled/format.h	/^struct Arg : Value$/;"	s	namespace:fmt::internal
ArgArray	libs/spdlog/fmt/bundled/format.h	/^struct ArgArray<N, false\/*IsPacked*\/>$/;"	s	namespace:fmt
ArgConverter	libs/spdlog/fmt/bundled/printf.h	/^    ArgConverter(internal::Arg &arg, wchar_t type)$/;"	f	class:fmt::internal::ArgConverter
ArgConverter	libs/spdlog/fmt/bundled/printf.h	/^class ArgConverter : public ArgVisitor<ArgConverter<T>, void>$/;"	c	namespace:fmt::internal
ArgFormatter	libs/spdlog/fmt/bundled/format.h	/^    ArgFormatter(BasicFormatter<Char> &formatter,$/;"	f	class:fmt::ArgFormatter
ArgFormatter	libs/spdlog/fmt/bundled/format.h	/^class ArgFormatter : public BasicArgFormatter<ArgFormatter<Char>, Char>$/;"	c	namespace:fmt
ArgFormatterBase	libs/spdlog/fmt/bundled/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::ArgFormatterBase
ArgFormatterBase	libs/spdlog/fmt/bundled/format.h	/^class ArgFormatterBase : public ArgVisitor<Impl, void>$/;"	c	namespace:fmt::internal
ArgList	libs/spdlog/fmt/bundled/format.h	/^    ArgList() : types_(0) {}$/;"	f	class:fmt::ArgList
ArgList	libs/spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fmt::ArgList
ArgList	libs/spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fmt::ArgList
ArgList	libs/spdlog/fmt/bundled/format.h	/^class ArgList$/;"	c	namespace:fmt
ArgMap	libs/spdlog/fmt/bundled/format.h	/^class ArgMap$/;"	c	namespace:fmt::internal
ArgType	libs/spdlog/fmt/bundled/format.h	/^    ArgType() : type(0) {}$/;"	f	struct:fmt::ArgType
ArgType	libs/spdlog/fmt/bundled/format.h	/^    ArgType(const T &arg) : type(make_type(arg)) {}$/;"	f	struct:fmt::ArgType
ArgType	libs/spdlog/fmt/bundled/format.h	/^struct ArgType$/;"	s	namespace:fmt
ArgVisitor	libs/spdlog/fmt/bundled/format.h	/^class ArgVisitor$/;"	c	namespace:fmt
ArrayWriter	libs/spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t
AsyncLogItem	easylogging++.h	/^            explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base::type::string_t& logLine)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
AsyncLogItem	easylogging++.h	/^        class AsyncLogItem {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base
AsyncLogQueue	easylogging++.h	/^        class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base
AutoSpacing	easylogging++.h	/^                AutoSpacing = 8192,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
BLACK	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
BLUE	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
BOOL	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
BUFFER_SIZE	libs/spdlog/fmt/bundled/format.h	/^    enum {BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3};$/;"	e	enum:FormatInt::__anon33
B_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class B_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Base	libs/spdlog/fmt/bundled/printf.h	/^    typedef internal::ArgFormatterBase<Impl, Char> Base;$/;"	t	class:fmt::BasicPrintfArgFormatter
BasicArgFormatter	libs/spdlog/fmt/bundled/format.h	/^    BasicArgFormatter(BasicFormatter<Char, Impl> &formatter,$/;"	f	class:fmt::BasicArgFormatter
BasicArgFormatter	libs/spdlog/fmt/bundled/format.h	/^class BasicArgFormatter : public internal::ArgFormatterBase<Impl, Char>$/;"	c	namespace:fmt
BasicArrayWriter	libs/spdlog/fmt/bundled/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:BasicArrayWriter
BasicArrayWriter	libs/spdlog/fmt/bundled/format.h	/^class BasicArrayWriter : public BasicWriter<Char>$/;"	c
BasicCStringRef	libs/spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const Char *s) : data_(s) {}$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	libs/spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const std::basic_string<Char> &s) : data_(s.c_str()) {}$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	libs/spdlog/fmt/bundled/format.h	/^class BasicCStringRef$/;"	c	namespace:fmt
BasicCharTraits	libs/spdlog/fmt/bundled/format.h	/^class BasicCharTraits$/;"	c	namespace:fmt::internal
BasicData	libs/spdlog/fmt/bundled/format.cc	/^template struct internal::BasicData<void>;$/;"	m	class:fmt::internal	typeref:struct:fmt::internal::	file:
BasicFormatter	libs/spdlog/fmt/bundled/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::BasicFormatter
BasicFormatter	libs/spdlog/fmt/bundled/format.h	/^class BasicFormatter : private internal::FormatterBase$/;"	c	namespace:fmt
BasicMemoryWriter	libs/spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	libs/spdlog/fmt/bundled/format.h	/^    explicit BasicMemoryWriter(const Allocator& alloc = Allocator())$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	libs/spdlog/fmt/bundled/format.h	/^class BasicMemoryWriter : public BasicWriter<Char>$/;"	c
BasicPrintfArgFormatter	libs/spdlog/fmt/bundled/printf.h	/^    BasicPrintfArgFormatter(BasicWriter<Char> &writer, FormatSpec &spec)$/;"	f	class:fmt::BasicPrintfArgFormatter
BasicPrintfArgFormatter	libs/spdlog/fmt/bundled/printf.h	/^class BasicPrintfArgFormatter : public internal::ArgFormatterBase<Impl, Char>$/;"	c	namespace:fmt
BasicStringRef	libs/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	libs/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s, std::size_t size) : data_(s), size_(size) {}$/;"	f	class:fmt::BasicStringRef
BasicStringRef	libs/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const std::basic_string<Char> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	libs/spdlog/fmt/bundled/format.h	/^class BasicStringRef$/;"	c	namespace:fmt
BasicWriter	libs/spdlog/fmt/bundled/format.h	/^    explicit BasicWriter(Buffer<Char> &b) : buffer_(b) {}$/;"	f	class:BasicWriter
BasicWriter	libs/spdlog/fmt/bundled/format.h	/^class BasicWriter$/;"	c
Buffer	libs/spdlog/fmt/bundled/format.h	/^    Buffer(T *ptr = 0, std::size_t capacity = 0)$/;"	f	class:fmt::Buffer
Buffer	libs/spdlog/fmt/bundled/format.h	/^class Buffer$/;"	c	namespace:fmt
CCHECK	easylogging++.h	6542;"	d
CCHECK	easylogging++.h	6566;"	d
CCHECK_BOUNDS	easylogging++.h	6550;"	d
CCHECK_BOUNDS	easylogging++.h	6576;"	d
CCHECK_EQ	easylogging++.h	6544;"	d
CCHECK_EQ	easylogging++.h	6570;"	d
CCHECK_GE	easylogging++.h	6549;"	d
CCHECK_GE	easylogging++.h	6575;"	d
CCHECK_GT	easylogging++.h	6547;"	d
CCHECK_GT	easylogging++.h	6573;"	d
CCHECK_LE	easylogging++.h	6548;"	d
CCHECK_LE	easylogging++.h	6574;"	d
CCHECK_LT	easylogging++.h	6546;"	d
CCHECK_LT	easylogging++.h	6572;"	d
CCHECK_NE	easylogging++.h	6545;"	d
CCHECK_NE	easylogging++.h	6571;"	d
CCHECK_NOTNULL	easylogging++.h	6551;"	d
CCHECK_NOTNULL	easylogging++.h	6584;"	d
CCHECK_STRCASEEQ	easylogging++.h	6552;"	d
CCHECK_STRCASEEQ	easylogging++.h	6589;"	d
CCHECK_STRCASENE	easylogging++.h	6553;"	d
CCHECK_STRCASENE	easylogging++.h	6591;"	d
CCHECK_STREQ	easylogging++.h	6585;"	d
CCHECK_STRNE	easylogging++.h	6587;"	d
CDEBUG	easylogging++.h	6080;"	d
CDEBUG	easylogging++.h	6125;"	d
CDEBUG	easylogging++.h	6127;"	d
CDEBUG_AFTER_N	easylogging++.h	6101;"	d
CDEBUG_AFTER_N	easylogging++.h	6250;"	d
CDEBUG_AFTER_N	easylogging++.h	6253;"	d
CDEBUG_EVERY_N	easylogging++.h	6094;"	d
CDEBUG_EVERY_N	easylogging++.h	6207;"	d
CDEBUG_EVERY_N	easylogging++.h	6210;"	d
CDEBUG_IF	easylogging++.h	6087;"	d
CDEBUG_IF	easylogging++.h	6164;"	d
CDEBUG_IF	easylogging++.h	6167;"	d
CDEBUG_N_TIMES	easylogging++.h	6108;"	d
CDEBUG_N_TIMES	easylogging++.h	6293;"	d
CDEBUG_N_TIMES	easylogging++.h	6296;"	d
CERROR	easylogging++.h	6082;"	d
CERROR	easylogging++.h	6130;"	d
CERROR	easylogging++.h	6132;"	d
CERROR_AFTER_N	easylogging++.h	6102;"	d
CERROR_AFTER_N	easylogging++.h	6256;"	d
CERROR_AFTER_N	easylogging++.h	6259;"	d
CERROR_EVERY_N	easylogging++.h	6095;"	d
CERROR_EVERY_N	easylogging++.h	6213;"	d
CERROR_EVERY_N	easylogging++.h	6216;"	d
CERROR_IF	easylogging++.h	6088;"	d
CERROR_IF	easylogging++.h	6170;"	d
CERROR_IF	easylogging++.h	6173;"	d
CERROR_N_TIMES	easylogging++.h	6109;"	d
CERROR_N_TIMES	easylogging++.h	6299;"	d
CERROR_N_TIMES	easylogging++.h	6302;"	d
CFATAL	easylogging++.h	6081;"	d
CFATAL	easylogging++.h	6135;"	d
CFATAL	easylogging++.h	6137;"	d
CFATAL_AFTER_N	easylogging++.h	6103;"	d
CFATAL_AFTER_N	easylogging++.h	6262;"	d
CFATAL_AFTER_N	easylogging++.h	6265;"	d
CFATAL_EVERY_N	easylogging++.h	6096;"	d
CFATAL_EVERY_N	easylogging++.h	6219;"	d
CFATAL_EVERY_N	easylogging++.h	6222;"	d
CFATAL_IF	easylogging++.h	6089;"	d
CFATAL_IF	easylogging++.h	6176;"	d
CFATAL_IF	easylogging++.h	6179;"	d
CFATAL_N_TIMES	easylogging++.h	6110;"	d
CFATAL_N_TIMES	easylogging++.h	6305;"	d
CFATAL_N_TIMES	easylogging++.h	6308;"	d
CHAR	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
CHAR_FLAG	libs/spdlog/fmt/bundled/format.h	/^    CHAR_FLAG = 0x10  \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fmt::__anon32
CHECK	easylogging++.h	6554;"	d
CHECK	easylogging++.h	6568;"	d
CHECK_BOUNDS	easylogging++.h	6562;"	d
CHECK_BOUNDS	easylogging++.h	6583;"	d
CHECK_EQ	easylogging++.h	6556;"	d
CHECK_EQ	easylogging++.h	6577;"	d
CHECK_GE	easylogging++.h	6561;"	d
CHECK_GE	easylogging++.h	6582;"	d
CHECK_GT	easylogging++.h	6559;"	d
CHECK_GT	easylogging++.h	6580;"	d
CHECK_LE	easylogging++.h	6560;"	d
CHECK_LE	easylogging++.h	6581;"	d
CHECK_LT	easylogging++.h	6558;"	d
CHECK_LT	easylogging++.h	6579;"	d
CHECK_NE	easylogging++.h	6557;"	d
CHECK_NE	easylogging++.h	6578;"	d
CHECK_NOTNULL	easylogging++.h	6563;"	d
CHECK_NOTNULL	easylogging++.h	6593;"	d
CHECK_STRCASEEQ	easylogging++.h	6564;"	d
CHECK_STRCASEEQ	easylogging++.h	6596;"	d
CHECK_STRCASENE	easylogging++.h	6565;"	d
CHECK_STRCASENE	easylogging++.h	6597;"	d
CHECK_STREQ	easylogging++.h	6594;"	d
CHECK_STRNE	easylogging++.h	6595;"	d
CINFO	easylogging++.h	6078;"	d
CINFO	easylogging++.h	6115;"	d
CINFO	easylogging++.h	6117;"	d
CINFO_AFTER_N	easylogging++.h	6099;"	d
CINFO_AFTER_N	easylogging++.h	6238;"	d
CINFO_AFTER_N	easylogging++.h	6241;"	d
CINFO_EVERY_N	easylogging++.h	6092;"	d
CINFO_EVERY_N	easylogging++.h	6195;"	d
CINFO_EVERY_N	easylogging++.h	6198;"	d
CINFO_IF	easylogging++.h	6085;"	d
CINFO_IF	easylogging++.h	6152;"	d
CINFO_IF	easylogging++.h	6155;"	d
CINFO_N_TIMES	easylogging++.h	6106;"	d
CINFO_N_TIMES	easylogging++.h	6281;"	d
CINFO_N_TIMES	easylogging++.h	6284;"	d
CLOG	easylogging++.h	6326;"	d
CLOG	easylogging++.h	6339;"	d
CLOG_AFTER_N	easylogging++.h	6334;"	d
CLOG_AFTER_N	easylogging++.h	6352;"	d
CLOG_EVERY_N	easylogging++.h	6332;"	d
CLOG_EVERY_N	easylogging++.h	6348;"	d
CLOG_IF	easylogging++.h	6329;"	d
CLOG_IF	easylogging++.h	6343;"	d
CLOG_N_TIMES	easylogging++.h	6336;"	d
CLOG_N_TIMES	easylogging++.h	6356;"	d
CLOG_VERBOSE	easylogging++.h	6327;"	d
CLOG_VERBOSE_IF	easylogging++.h	6330;"	d
CMatrixT	DataStructs.h	/^typedef Eigen::MatrixXcd CMatrixT;$/;"	t
CONFIG_H_	Config.h	2;"	d
CPCHECK	easylogging++.h	6543;"	d
CPCHECK	easylogging++.h	6567;"	d
CPLOG	easylogging++.h	6396;"	d
CPLOG	easylogging++.h	6404;"	d
CPLOG_IF	easylogging++.h	6397;"	d
CPLOG_IF	easylogging++.h	6406;"	d
CRowVectorT	DataStructs.h	/^typedef Eigen::RowVectorXcd CRowVectorT;$/;"	t
CSTRING	libs/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CSYSLOG	easylogging++.h	6417;"	d
CSYSLOG	easylogging++.h	6438;"	d
CSYSLOG	easylogging++.h	6465;"	d
CSYSLOG_AFTER_N	easylogging++.h	6420;"	d
CSYSLOG_AFTER_N	easylogging++.h	6443;"	d
CSYSLOG_AFTER_N	easylogging++.h	6468;"	d
CSYSLOG_EVERY_N	easylogging++.h	6419;"	d
CSYSLOG_EVERY_N	easylogging++.h	6442;"	d
CSYSLOG_EVERY_N	easylogging++.h	6467;"	d
CSYSLOG_IF	easylogging++.h	6418;"	d
CSYSLOG_IF	easylogging++.h	6440;"	d
CSYSLOG_IF	easylogging++.h	6466;"	d
CSYSLOG_N_TIMES	easylogging++.h	6421;"	d
CSYSLOG_N_TIMES	easylogging++.h	6444;"	d
CSYSLOG_N_TIMES	easylogging++.h	6469;"	d
CStringRef	libs/spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fmt
CTRACE	easylogging++.h	6083;"	d
CTRACE	easylogging++.h	6140;"	d
CTRACE	easylogging++.h	6142;"	d
CTRACE_AFTER_N	easylogging++.h	6104;"	d
CTRACE_AFTER_N	easylogging++.h	6268;"	d
CTRACE_AFTER_N	easylogging++.h	6271;"	d
CTRACE_EVERY_N	easylogging++.h	6097;"	d
CTRACE_EVERY_N	easylogging++.h	6225;"	d
CTRACE_EVERY_N	easylogging++.h	6228;"	d
CTRACE_IF	easylogging++.h	6090;"	d
CTRACE_IF	easylogging++.h	6182;"	d
CTRACE_IF	easylogging++.h	6185;"	d
CTRACE_N_TIMES	easylogging++.h	6111;"	d
CTRACE_N_TIMES	easylogging++.h	6311;"	d
CTRACE_N_TIMES	easylogging++.h	6314;"	d
CUSTOM	libs/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CVERBOSE	easylogging++.h	6084;"	d
CVERBOSE	easylogging++.h	6145;"	d
CVERBOSE	easylogging++.h	6148;"	d
CVERBOSE_AFTER_N	easylogging++.h	6105;"	d
CVERBOSE_AFTER_N	easylogging++.h	6274;"	d
CVERBOSE_AFTER_N	easylogging++.h	6277;"	d
CVERBOSE_EVERY_N	easylogging++.h	6098;"	d
CVERBOSE_EVERY_N	easylogging++.h	6231;"	d
CVERBOSE_EVERY_N	easylogging++.h	6234;"	d
CVERBOSE_IF	easylogging++.h	6091;"	d
CVERBOSE_IF	easylogging++.h	6188;"	d
CVERBOSE_IF	easylogging++.h	6191;"	d
CVERBOSE_N_TIMES	easylogging++.h	6112;"	d
CVERBOSE_N_TIMES	easylogging++.h	6317;"	d
CVERBOSE_N_TIMES	easylogging++.h	6320;"	d
CVLOG	easylogging++.h	6328;"	d
CVLOG	easylogging++.h	6341;"	d
CVLOG_AFTER_N	easylogging++.h	6335;"	d
CVLOG_AFTER_N	easylogging++.h	6354;"	d
CVLOG_EVERY_N	easylogging++.h	6333;"	d
CVLOG_EVERY_N	easylogging++.h	6350;"	d
CVLOG_IF	easylogging++.h	6331;"	d
CVLOG_IF	easylogging++.h	6345;"	d
CVLOG_N_TIMES	easylogging++.h	6337;"	d
CVLOG_N_TIMES	easylogging++.h	6358;"	d
CVectorT	DataStructs.h	/^typedef Eigen::VectorXcd CVectorT;$/;"	t
CWARNING	easylogging++.h	6079;"	d
CWARNING	easylogging++.h	6120;"	d
CWARNING	easylogging++.h	6122;"	d
CWARNING_AFTER_N	easylogging++.h	6100;"	d
CWARNING_AFTER_N	easylogging++.h	6244;"	d
CWARNING_AFTER_N	easylogging++.h	6247;"	d
CWARNING_EVERY_N	easylogging++.h	6093;"	d
CWARNING_EVERY_N	easylogging++.h	6201;"	d
CWARNING_EVERY_N	easylogging++.h	6204;"	d
CWARNING_IF	easylogging++.h	6086;"	d
CWARNING_IF	easylogging++.h	6158;"	d
CWARNING_IF	easylogging++.h	6161;"	d
CWARNING_N_TIMES	easylogging++.h	6107;"	d
CWARNING_N_TIMES	easylogging++.h	6287;"	d
CWARNING_N_TIMES	easylogging++.h	6290;"	d
CYAN	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
C_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class C_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Callback	easylogging++.h	/^        Callback(void) : m_enabled(true) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Callback
Callback	easylogging++.h	/^    class Callback : protected base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
Char	libs/spdlog/fmt/bundled/format.h	/^    typedef CharType Char;$/;"	t	class:fmt::BasicFormatter
Char	libs/spdlog/fmt/bundled/format.h	/^    typedef char Char;  \/\/ For FMT_VARIADIC_CTOR.$/;"	t	class:SystemError
Char	libs/spdlog/fmt/bundled/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fmt::internal::MakeValue
CharConverter	libs/spdlog/fmt/bundled/printf.h	/^    explicit CharConverter(internal::Arg &arg) : arg_(arg) {}$/;"	f	class:fmt::internal::CharConverter
CharConverter	libs/spdlog/fmt/bundled/printf.h	/^class CharConverter : public ArgVisitor<CharConverter, void>$/;"	c	namespace:fmt::internal
CharPtr	libs/spdlog/fmt/bundled/format.h	/^    typedef stdext::checked_array_iterator<Char*> CharPtr;$/;"	t	class:fmt::internal::BasicCharTraits
CharPtr	libs/spdlog/fmt/bundled/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:BasicWriter
CharTraits	libs/spdlog/fmt/bundled/format.h	/^class CharTraits<char> : public BasicCharTraits<char>$/;"	c	namespace:fmt::internal
CharTraits	libs/spdlog/fmt/bundled/format.h	/^class CharTraits<wchar_t> : public BasicCharTraits<wchar_t>$/;"	c	namespace:fmt::internal
Color	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	g
ColoredTerminalOutput	easylogging++.h	/^                ColoredTerminalOutput = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
ComplexT	DataStructs.h	/^typedef std::complex<RealT> ComplexT;		\/\/ this is PETSC complex, when compiled with --with-clanguage=c++$/;"	t
Conditional	libs/spdlog/fmt/bundled/format.h	/^struct Conditional$/;"	s	namespace:fmt::internal
Conditional	libs/spdlog/fmt/bundled/format.h	/^struct Conditional<false, T, F>$/;"	s	namespace:fmt::internal
Configuration	easylogging++.h	/^    Configuration(Level level, ConfigurationType configurationType, const std::string& value) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
Configuration	easylogging++.h	/^    Configuration(const Configuration& c) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
Configuration	easylogging++.h	/^class Configuration : public Loggable {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
ConfigurationType	easylogging++.h	/^        enum class ConfigurationType : base::type::EnumType {$/;"	c	class:el::Level
ConfigurationTypeHelper	easylogging++.h	/^            class ConfigurationTypeHelper : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType
Configurations	easylogging++.h	/^    Configurations(const std::string& configurationFile, bool useDefaultsForRemaining = true, Configurations* base = nullptr) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
Configurations	easylogging++.h	/^    Configurations(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
Configurations	easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predicate> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
ConvertToInt	libs/spdlog/fmt/bundled/format.h	/^struct ConvertToInt$/;"	s	namespace:fmt::internal
ConvertToIntImpl	libs/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl$/;"	s	namespace:fmt::internal
ConvertToIntImpl	libs/spdlog/fmt/bundled/ostream.h	/^struct ConvertToIntImpl<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	libs/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	libs/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2<T, true>$/;"	s	namespace:fmt::internal
CreateLoggerAutomatically	easylogging++.h	/^                CreateLoggerAutomatically = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
CustomFormatSpecifier	easylogging++.h	/^    CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolver) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::CustomFormatSpecifier
CustomFormatSpecifier	easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
CustomValue	libs/spdlog/fmt/bundled/format.h	/^    struct CustomValue$/;"	s	struct:fmt::internal::Value
DATA_STRUCT_H_	DataStructs.h	2;"	d
DCCHECK	easylogging++.h	6598;"	d
DCCHECK	easylogging++.h	6622;"	d
DCCHECK_BOUNDS	easylogging++.h	6605;"	d
DCCHECK_BOUNDS	easylogging++.h	6629;"	d
DCCHECK_EQ	easylogging++.h	6599;"	d
DCCHECK_EQ	easylogging++.h	6623;"	d
DCCHECK_GE	easylogging++.h	6604;"	d
DCCHECK_GE	easylogging++.h	6628;"	d
DCCHECK_GT	easylogging++.h	6602;"	d
DCCHECK_GT	easylogging++.h	6626;"	d
DCCHECK_LE	easylogging++.h	6603;"	d
DCCHECK_LE	easylogging++.h	6627;"	d
DCCHECK_LT	easylogging++.h	6601;"	d
DCCHECK_LT	easylogging++.h	6625;"	d
DCCHECK_NE	easylogging++.h	6600;"	d
DCCHECK_NE	easylogging++.h	6624;"	d
DCCHECK_NOTNULL	easylogging++.h	6606;"	d
DCCHECK_NOTNULL	easylogging++.h	6630;"	d
DCCHECK_STRCASEEQ	easylogging++.h	6607;"	d
DCCHECK_STRCASEEQ	easylogging++.h	6633;"	d
DCCHECK_STRCASENE	easylogging++.h	6608;"	d
DCCHECK_STRCASENE	easylogging++.h	6634;"	d
DCCHECK_STREQ	easylogging++.h	6631;"	d
DCCHECK_STRNE	easylogging++.h	6632;"	d
DCHECK	easylogging++.h	6610;"	d
DCHECK	easylogging++.h	6636;"	d
DCHECK_BOUNDS	easylogging++.h	6643;"	d
DCHECK_BOUNDS_	easylogging++.h	6617;"	d
DCHECK_EQ	easylogging++.h	6611;"	d
DCHECK_EQ	easylogging++.h	6637;"	d
DCHECK_GE	easylogging++.h	6616;"	d
DCHECK_GE	easylogging++.h	6642;"	d
DCHECK_GT	easylogging++.h	6614;"	d
DCHECK_GT	easylogging++.h	6640;"	d
DCHECK_LE	easylogging++.h	6615;"	d
DCHECK_LE	easylogging++.h	6641;"	d
DCHECK_LT	easylogging++.h	6613;"	d
DCHECK_LT	easylogging++.h	6639;"	d
DCHECK_NE	easylogging++.h	6612;"	d
DCHECK_NE	easylogging++.h	6638;"	d
DCHECK_NOTNULL	easylogging++.h	6618;"	d
DCHECK_NOTNULL	easylogging++.h	6644;"	d
DCHECK_STRCASEEQ	easylogging++.h	6619;"	d
DCHECK_STRCASEEQ	easylogging++.h	6647;"	d
DCHECK_STRCASENE	easylogging++.h	6620;"	d
DCHECK_STRCASENE	easylogging++.h	6648;"	d
DCHECK_STREQ	easylogging++.h	6645;"	d
DCHECK_STRNE	easylogging++.h	6646;"	d
DCLOG	easylogging++.h	6490;"	d
DCLOG	easylogging++.h	6501;"	d
DCLOG_AFTER_N	easylogging++.h	6496;"	d
DCLOG_AFTER_N	easylogging++.h	6510;"	d
DCLOG_EVERY_N	easylogging++.h	6494;"	d
DCLOG_EVERY_N	easylogging++.h	6508;"	d
DCLOG_IF	easylogging++.h	6492;"	d
DCLOG_IF	easylogging++.h	6505;"	d
DCLOG_N_TIMES	easylogging++.h	6498;"	d
DCLOG_N_TIMES	easylogging++.h	6512;"	d
DCLOG_VERBOSE	easylogging++.h	6502;"	d
DCPCHECK	easylogging++.h	6609;"	d
DCPCHECK	easylogging++.h	6635;"	d
DCPLOG	easylogging++.h	6400;"	d
DCPLOG	easylogging++.h	6408;"	d
DCPLOG_IF	easylogging++.h	6401;"	d
DCPLOG_IF	easylogging++.h	6410;"	d
DCSYSLOG	easylogging++.h	6427;"	d
DCSYSLOG	easylogging++.h	6450;"	d
DCSYSLOG	easylogging++.h	6475;"	d
DCSYSLOG_AFTER_N	easylogging++.h	6430;"	d
DCSYSLOG_AFTER_N	easylogging++.h	6455;"	d
DCSYSLOG_AFTER_N	easylogging++.h	6478;"	d
DCSYSLOG_EVERY_N	easylogging++.h	6429;"	d
DCSYSLOG_EVERY_N	easylogging++.h	6453;"	d
DCSYSLOG_EVERY_N	easylogging++.h	6477;"	d
DCSYSLOG_IF	easylogging++.h	6428;"	d
DCSYSLOG_IF	easylogging++.h	6451;"	d
DCSYSLOG_IF	easylogging++.h	6476;"	d
DCSYSLOG_N_TIMES	easylogging++.h	6431;"	d
DCSYSLOG_N_TIMES	easylogging++.h	6457;"	d
DCSYSLOG_N_TIMES	easylogging++.h	6479;"	d
DCVLOG	easylogging++.h	6491;"	d
DCVLOG	easylogging++.h	6503;"	d
DCVLOG_AFTER_N	easylogging++.h	6497;"	d
DCVLOG_AFTER_N	easylogging++.h	6511;"	d
DCVLOG_EVERY_N	easylogging++.h	6495;"	d
DCVLOG_EVERY_N	easylogging++.h	6509;"	d
DCVLOG_IF	easylogging++.h	6493;"	d
DCVLOG_IF	easylogging++.h	6506;"	d
DCVLOG_N_TIMES	easylogging++.h	6499;"	d
DCVLOG_N_TIMES	easylogging++.h	6513;"	d
DEBUG	easylogging++.h	6072;"	d
DEPRECATED	libs/spdlog/common.h	33;"	d
DEPRECATED	libs/spdlog/common.h	35;"	d
DEPRECATED	libs/spdlog/common.h	37;"	d
DIGITS	libs/spdlog/fmt/bundled/format.cc	/^const char internal::BasicData<T>::DIGITS[] =$/;"	m	class:fmt::internal::BasicData	file:
DLOG	easylogging++.h	6518;"	d
DLOG	easylogging++.h	6529;"	d
DLOG_AFTER_N	easylogging++.h	6524;"	d
DLOG_AFTER_N	easylogging++.h	6537;"	d
DLOG_EVERY_N	easylogging++.h	6522;"	d
DLOG_EVERY_N	easylogging++.h	6535;"	d
DLOG_IF	easylogging++.h	6520;"	d
DLOG_IF	easylogging++.h	6532;"	d
DLOG_N_TIMES	easylogging++.h	6526;"	d
DLOG_N_TIMES	easylogging++.h	6539;"	d
DOUBLE	libs/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
DPCHECK	easylogging++.h	6621;"	d
DPCHECK	easylogging++.h	6649;"	d
DPLOG	easylogging++.h	6402;"	d
DPLOG	easylogging++.h	6414;"	d
DPLOG_IF	easylogging++.h	6403;"	d
DPLOG_IF	easylogging++.h	6415;"	d
DSYSLOG	easylogging++.h	6432;"	d
DSYSLOG	easylogging++.h	6459;"	d
DSYSLOG	easylogging++.h	6480;"	d
DSYSLOG_AFTER_N	easylogging++.h	6435;"	d
DSYSLOG_AFTER_N	easylogging++.h	6462;"	d
DSYSLOG_AFTER_N	easylogging++.h	6483;"	d
DSYSLOG_EVERY_N	easylogging++.h	6434;"	d
DSYSLOG_EVERY_N	easylogging++.h	6461;"	d
DSYSLOG_EVERY_N	easylogging++.h	6482;"	d
DSYSLOG_IF	easylogging++.h	6433;"	d
DSYSLOG_IF	easylogging++.h	6460;"	d
DSYSLOG_IF	easylogging++.h	6481;"	d
DSYSLOG_N_TIMES	easylogging++.h	6436;"	d
DSYSLOG_N_TIMES	easylogging++.h	6463;"	d
DSYSLOG_N_TIMES	easylogging++.h	6484;"	d
DVLOG	easylogging++.h	6519;"	d
DVLOG	easylogging++.h	6530;"	d
DVLOG_AFTER_N	easylogging++.h	6525;"	d
DVLOG_AFTER_N	easylogging++.h	6538;"	d
DVLOG_EVERY_N	easylogging++.h	6523;"	d
DVLOG_EVERY_N	easylogging++.h	6536;"	d
DVLOG_IF	easylogging++.h	6521;"	d
DVLOG_IF	easylogging++.h	6533;"	d
DVLOG_N_TIMES	easylogging++.h	6527;"	d
DVLOG_N_TIMES	easylogging++.h	6540;"	d
D_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class D_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
DateTime	easylogging++.h	/^                            DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Day	easylogging++.h	/^                        Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Debug	easylogging++.h	/^        Debug = 4,$/;"	m	class:el::Level
DisableApplicationAbortOnFatalLog	easylogging++.h	/^                DisableApplicationAbortOnFatalLog = 8,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisablePerformanceTrackingCheckpointComparison	easylogging++.h	/^                DisablePerformanceTrackingCheckpointComparison = 256,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisableVModules	easylogging++.h	/^                DisableVModules = 512,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisableVModulesExtensions	easylogging++.h	/^                DisableVModulesExtensions = 1024,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DispatchAction	easylogging++.h	/^    enum class DispatchAction : base::type::EnumType {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
Draw	IOhelper.cpp	/^int IOhelper::Draw(mglGraph *gr)$/;"	f	class:IOhelper
DummyInt	libs/spdlog/fmt/bundled/format.h	/^struct DummyInt$/;"	s	namespace:fmt::internal
DummyStream	libs/spdlog/fmt/bundled/ostream.h	/^struct DummyStream : std::ostream$/;"	s	namespace:fmt::internal
EASYLOGGINGPP_H	easylogging++.h	19;"	d
ELPP	easylogging++.h	4218;"	d
ELPP_ASSERT	easylogging++.h	140;"	d
ELPP_ASSERT	easylogging++.h	147;"	d
ELPP_ASSERT	easylogging++.h	155;"	d
ELPP_ASYNC_LOGGING	easylogging++.h	247;"	d
ELPP_ASYNC_LOGGING	easylogging++.h	249;"	d
ELPP_CLANG_VERSION	easylogging++.h	57;"	d
ELPP_COMPILER_CLANG	easylogging++.h	52;"	d
ELPP_COMPILER_CLANG	easylogging++.h	54;"	d
ELPP_COMPILER_GCC	easylogging++.h	22;"	d
ELPP_COMPILER_GCC	easylogging++.h	24;"	d
ELPP_COMPILER_INTEL	easylogging++.h	75;"	d
ELPP_COMPILER_INTEL	easylogging++.h	77;"	d
ELPP_COMPILER_MSVC	easylogging++.h	38;"	d
ELPP_COMPILER_MSVC	easylogging++.h	40;"	d
ELPP_COUNTER	easylogging++.h	6063;"	d
ELPP_COUNTER	easylogging++.h	6066;"	d
ELPP_COUNTER_POS	easylogging++.h	6064;"	d
ELPP_COUNTER_POS	easylogging++.h	6068;"	d
ELPP_COUT	easylogging++.h	469;"	d
ELPP_COUT	easylogging++.h	474;"	d
ELPP_COUT_LINE	easylogging++.h	498;"	d
ELPP_COUT_LINE	easylogging++.h	500;"	d
ELPP_CRASH_HANDLER_INIT	easylogging++.h	6655;"	d
ELPP_CRT_DBG_WARNINGS	easylogging++.h	42;"	d
ELPP_CURR_FILE_LOGGER_ID	easylogging++.h	6374;"	d
ELPP_CURR_FILE_LOGGER_ID	easylogging++.h	6376;"	d
ELPP_CURR_FILE_LOGGER_ID	easylogging++.h	6378;"	d
ELPP_CURR_FILE_PERFORMANCE_LOGGER	easylogging++.h	5275;"	d
ELPP_CURR_FILE_PERFORMANCE_LOGGER	easylogging++.h	5277;"	d
ELPP_CXX0X	easylogging++.h	31;"	d
ELPP_CXX0X	easylogging++.h	45;"	d
ELPP_CXX11	easylogging++.h	33;"	d
ELPP_CXX11	easylogging++.h	47;"	d
ELPP_CXX11	easylogging++.h	61;"	d
ELPP_CYGWIN	easylogging++.h	70;"	d
ELPP_CYGWIN	easylogging++.h	72;"	d
ELPP_DEBUG_LOG	easylogging++.h	280;"	d
ELPP_DEBUG_LOG	easylogging++.h	282;"	d
ELPP_ERROR_LOG	easylogging++.h	295;"	d
ELPP_ERROR_LOG	easylogging++.h	297;"	d
ELPP_EXPORT	easylogging++.h	211;"	d
ELPP_EXPORT	easylogging++.h	213;"	d
ELPP_EXPORT	easylogging++.h	216;"	d
ELPP_FATAL_LOG	easylogging++.h	300;"	d
ELPP_FATAL_LOG	easylogging++.h	302;"	d
ELPP_FINAL	easylogging++.h	240;"	d
ELPP_FINAL	easylogging++.h	242;"	d
ELPP_FINAL	easylogging++.h	244;"	d
ELPP_FUNC	easylogging++.h	257;"	d
ELPP_FUNC	easylogging++.h	259;"	d
ELPP_FUNC	easylogging++.h	261;"	d
ELPP_FUNC	easylogging++.h	263;"	d
ELPP_FUNC	easylogging++.h	265;"	d
ELPP_FUNC	easylogging++.h	268;"	d
ELPP_FUNC	easylogging++.h	270;"	d
ELPP_GCC_VERSION	easylogging++.h	27;"	d
ELPP_INFO_LOG	easylogging++.h	285;"	d
ELPP_INFO_LOG	easylogging++.h	287;"	d
ELPP_INITIALIZE_SYSLOG	easylogging++.h	5690;"	d
ELPP_INITI_BASIC_DECLR	easylogging++.h	1594;"	d
ELPP_INIT_EASYLOGGINGPP	easylogging++.h	6656;"	d
ELPP_INTERNAL_DEBUGGING_ENDL	easylogging++.h	132;"	d
ELPP_INTERNAL_DEBUGGING_MSG	easylogging++.h	135;"	d
ELPP_INTERNAL_DEBUGGING_OUT_ERROR	easylogging++.h	129;"	d
ELPP_INTERNAL_DEBUGGING_OUT_INFO	easylogging++.h	126;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	easylogging++.h	158;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	easylogging++.h	162;"	d
ELPP_INTERNAL_ERROR	easylogging++.h	167;"	d
ELPP_INTERNAL_ERROR	easylogging++.h	176;"	d
ELPP_INTERNAL_INFO	easylogging++.h	175;"	d
ELPP_INTERNAL_INFO	easylogging++.h	183;"	d
ELPP_INTERNAL_INFO	easylogging++.h	189;"	d
ELPP_INTERNAL_INFO	easylogging++.h	190;"	d
ELPP_INTERNAL_INFO_LEVEL	easylogging++.h	180;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	easylogging++.h	4685;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	easylogging++.h	4911;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	easylogging++.h	4680;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	easylogging++.h	4910;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	easylogging++.h	4665;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	easylogging++.h	4907;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	easylogging++.h	4675;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	easylogging++.h	4909;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	easylogging++.h	4670;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	easylogging++.h	4908;"	d
ELPP_LITERAL	easylogging++.h	467;"	d
ELPP_LITERAL	easylogging++.h	471;"	d
ELPP_LOGGING_ENABLED	easylogging++.h	278;"	d
ELPP_LOG_PERMS	easylogging++.h	207;"	d
ELPP_MINGW	easylogging++.h	65;"	d
ELPP_MINGW	easylogging++.h	67;"	d
ELPP_MIN_UNIT	easylogging++.h	6036;"	d
ELPP_MIN_UNIT	easylogging++.h	6038;"	d
ELPP_MIN_UNIT	easylogging++.h	6040;"	d
ELPP_OS_ANDROID	easylogging++.h	114;"	d
ELPP_OS_ANDROID	easylogging++.h	116;"	d
ELPP_OS_FREEBSD	easylogging++.h	100;"	d
ELPP_OS_FREEBSD	easylogging++.h	98;"	d
ELPP_OS_LINUX	easylogging++.h	121;"	d
ELPP_OS_LINUX	easylogging++.h	123;"	d
ELPP_OS_LINUX	easylogging++.h	88;"	d
ELPP_OS_LINUX	easylogging++.h	90;"	d
ELPP_OS_MAC	easylogging++.h	93;"	d
ELPP_OS_MAC	easylogging++.h	95;"	d
ELPP_OS_SOLARIS	easylogging++.h	103;"	d
ELPP_OS_SOLARIS	easylogging++.h	105;"	d
ELPP_OS_UNIX	easylogging++.h	109;"	d
ELPP_OS_UNIX	easylogging++.h	111;"	d
ELPP_OS_UNIX	easylogging++.h	120;"	d
ELPP_OS_UNIX	easylogging++.h	122;"	d
ELPP_OS_WINDOWS	easylogging++.h	82;"	d
ELPP_OS_WINDOWS	easylogging++.h	84;"	d
ELPP_SIMPLE_LOG	easylogging++.h	4614;"	d
ELPP_SIMPLE_LOG	easylogging++.h	4906;"	d
ELPP_STACKTRACE	easylogging++.h	194;"	d
ELPP_STL_LOGGING	Config.h	5;"	d
ELPP_STRLEN	easylogging++.h	468;"	d
ELPP_STRLEN	easylogging++.h	472;"	d
ELPP_THREADING_ENABLED	easylogging++.h	252;"	d
ELPP_THREADING_ENABLED	easylogging++.h	254;"	d
ELPP_TRACE	easylogging++.h	6380;"	d
ELPP_TRACE	easylogging++.h	6381;"	d
ELPP_TRACE_LOG	easylogging++.h	305;"	d
ELPP_TRACE_LOG	easylogging++.h	307;"	d
ELPP_UNUSED	easylogging++.h	204;"	d
ELPP_USE_DEF_CRASH_HANDLER	easylogging++.h	6651;"	d
ELPP_USE_DEF_CRASH_HANDLER	easylogging++.h	6653;"	d
ELPP_USE_STD_THREADING	easylogging++.h	236;"	d
ELPP_USE_STD_THREADING	easylogging++.h	238;"	d
ELPP_VARIADIC_FUNC_MSVC	easylogging++.h	5250;"	d
ELPP_VARIADIC_FUNC_MSVC_RUN	easylogging++.h	5251;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	easylogging++.h	273;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	easylogging++.h	275;"	d
ELPP_VERBOSE_LOG	easylogging++.h	310;"	d
ELPP_VERBOSE_LOG	easylogging++.h	312;"	d
ELPP_WARNING_LOG	easylogging++.h	290;"	d
ELPP_WARNING_LOG	easylogging++.h	292;"	d
ELPP_WRITE_LOG	easylogging++.h	5262;"	d
ELPP_WRITE_LOG_AFTER_N	easylogging++.h	5269;"	d
ELPP_WRITE_LOG_EVERY_N	easylogging++.h	5266;"	d
ELPP_WRITE_LOG_IF	easylogging++.h	5264;"	d
ELPP_WRITE_LOG_N_TIMES	easylogging++.h	5272;"	d
ELPP_WX_ENABLED	easylogging++.h	4895;"	d
ELPP_WX_HASH_MAP_ENABLED	easylogging++.h	4896;"	d
ELPP_WX_PTR_ENABLED	easylogging++.h	4894;"	d
ERROR	easylogging++.h	6073;"	d
EmptySpec	libs/spdlog/fmt/bundled/format.h	/^struct EmptySpec {};$/;"	s	namespace:fmt
EnableIf	libs/spdlog/fmt/bundled/format.h	/^struct EnableIf {};$/;"	s	namespace:fmt::internal
EnableIf	libs/spdlog/fmt/bundled/format.h	/^struct EnableIf<true, T>$/;"	s	namespace:fmt::internal
Enabled	easylogging++.h	/^            Enabled = 1,$/;"	m	class:el::Level::ConfigurationType
Energies	DataStructs.h	/^typedef Eigen::ArrayXd Energies;$/;"	t
EnumType	easylogging++.h	/^            typedef unsigned short EnumType;$/;"	t	namespace:el::base::type
Error	easylogging++.h	/^        Error = 16,$/;"	m	class:el::Level
EvaluateFunction	test.cp	/^PetscErrorCode EvaluateFunction(Tao tao, Vec X, Vec F, void *ptr)$/;"	f
EvaluateJacobian	test.cp	/^PetscErrorCode EvaluateJacobian(Tao tao, Vec X, Mat J, Mat Jpre, void *ptr)$/;"	f
FATAL	easylogging++.h	6074;"	d
FFT_H_	fft.h	2;"	d
FMT_API	libs/spdlog/fmt/bundled/format.h	69;"	d
FMT_API	libs/spdlog/fmt/bundled/format.h	71;"	d
FMT_API	libs/spdlog/fmt/bundled/format.h	75;"	d
FMT_ARG_TYPE_DEFAULT	libs/spdlog/fmt/bundled/format.h	2539;"	d
FMT_ASSERT	libs/spdlog/fmt/bundled/format.h	229;"	d
FMT_ASSIGN_char	libs/spdlog/fmt/bundled/format.h	2554;"	d
FMT_ASSIGN_wchar_t	libs/spdlog/fmt/bundled/format.h	2556;"	d
FMT_BUILTIN_CLZ	libs/spdlog/fmt/bundled/format.h	233;"	d
FMT_BUILTIN_CLZ	libs/spdlog/fmt/bundled/format.h	264;"	d
FMT_BUILTIN_CLZLL	libs/spdlog/fmt/bundled/format.h	237;"	d
FMT_BUILTIN_CLZLL	libs/spdlog/fmt/bundled/format.h	291;"	d
FMT_CATCH	libs/spdlog/fmt/bundled/format.cc	59;"	d	file:
FMT_CONCAT	libs/spdlog/fmt/bundled/format.h	1349;"	d
FMT_CONCAT_	libs/spdlog/fmt/bundled/format.h	1365;"	d
FMT_DEFINE_INT_FORMATTERS	libs/spdlog/fmt/bundled/format.h	2051;"	d
FMT_DELETED_OR_UNDEFINED	libs/spdlog/fmt/bundled/format.h	205;"	d
FMT_DELETED_OR_UNDEFINED	libs/spdlog/fmt/bundled/format.h	210;"	d
FMT_DISABLE_CONVERSION_TO_INT	libs/spdlog/fmt/bundled/format.h	1280;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	libs/spdlog/fmt/bundled/format.h	206;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	libs/spdlog/fmt/bundled/format.h	211;"	d
FMT_DISPATCH	libs/spdlog/fmt/bundled/format.h	1668;"	d
FMT_EXCEPTIONS	libs/spdlog/fmt/bundled/format.h	161;"	d
FMT_EXCEPTIONS	libs/spdlog/fmt/bundled/format.h	164;"	d
FMT_EXCEPTIONS	libs/spdlog/fmt/bundled/format.h	167;"	d
FMT_FORMAT_H_	libs/spdlog/fmt/bundled/format.h	29;"	d
FMT_FOR_EACH1	libs/spdlog/fmt/bundled/format.h	2629;"	d
FMT_FOR_EACH10	libs/spdlog/fmt/bundled/format.h	2646;"	d
FMT_FOR_EACH2	libs/spdlog/fmt/bundled/format.h	2630;"	d
FMT_FOR_EACH3	libs/spdlog/fmt/bundled/format.h	2632;"	d
FMT_FOR_EACH4	libs/spdlog/fmt/bundled/format.h	2634;"	d
FMT_FOR_EACH5	libs/spdlog/fmt/bundled/format.h	2636;"	d
FMT_FOR_EACH6	libs/spdlog/fmt/bundled/format.h	2638;"	d
FMT_FOR_EACH7	libs/spdlog/fmt/bundled/format.h	2640;"	d
FMT_FOR_EACH8	libs/spdlog/fmt/bundled/format.h	2642;"	d
FMT_FOR_EACH9	libs/spdlog/fmt/bundled/format.h	2644;"	d
FMT_GCC_EXTENSION	libs/spdlog/fmt/bundled/format.h	80;"	d
FMT_GCC_EXTENSION	libs/spdlog/fmt/bundled/format.h	97;"	d
FMT_GCC_VERSION	libs/spdlog/fmt/bundled/format.h	79;"	d
FMT_GEN	libs/spdlog/fmt/bundled/format.h	2455;"	d
FMT_GEN1	libs/spdlog/fmt/bundled/format.h	2456;"	d
FMT_GEN10	libs/spdlog/fmt/bundled/format.h	2465;"	d
FMT_GEN11	libs/spdlog/fmt/bundled/format.h	2466;"	d
FMT_GEN12	libs/spdlog/fmt/bundled/format.h	2467;"	d
FMT_GEN13	libs/spdlog/fmt/bundled/format.h	2468;"	d
FMT_GEN14	libs/spdlog/fmt/bundled/format.h	2469;"	d
FMT_GEN15	libs/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(FMT_GEN15(FMT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fmt
FMT_GEN15	libs/spdlog/fmt/bundled/format.h	2470;"	d
FMT_GEN2	libs/spdlog/fmt/bundled/format.h	2457;"	d
FMT_GEN3	libs/spdlog/fmt/bundled/format.h	2458;"	d
FMT_GEN4	libs/spdlog/fmt/bundled/format.h	2459;"	d
FMT_GEN5	libs/spdlog/fmt/bundled/format.h	2460;"	d
FMT_GEN6	libs/spdlog/fmt/bundled/format.h	2461;"	d
FMT_GEN7	libs/spdlog/fmt/bundled/format.h	2462;"	d
FMT_GEN8	libs/spdlog/fmt/bundled/format.h	2463;"	d
FMT_GEN9	libs/spdlog/fmt/bundled/format.h	2464;"	d
FMT_GNUC_LIBSTD_VERSION	libs/spdlog/fmt/bundled/format.h	113;"	d
FMT_HAS_BUILTIN	libs/spdlog/fmt/bundled/format.h	123;"	d
FMT_HAS_BUILTIN	libs/spdlog/fmt/bundled/format.h	125;"	d
FMT_HAS_CPP_ATTRIBUTE	libs/spdlog/fmt/bundled/format.h	129;"	d
FMT_HAS_CPP_ATTRIBUTE	libs/spdlog/fmt/bundled/format.h	131;"	d
FMT_HAS_FEATURE	libs/spdlog/fmt/bundled/format.h	117;"	d
FMT_HAS_FEATURE	libs/spdlog/fmt/bundled/format.h	119;"	d
FMT_HAS_GXX_CXX11	libs/spdlog/fmt/bundled/format.h	94;"	d
FMT_HEADER_ONLY	libs/spdlog/fmt/fmt.h	16;"	d
FMT_ICC_VERSION	libs/spdlog/fmt/bundled/format.h	101;"	d
FMT_ICC_VERSION	libs/spdlog/fmt/bundled/format.h	103;"	d
FMT_MAKE_ARG	libs/spdlog/fmt/bundled/format.h	2553;"	d
FMT_MAKE_ARG_TYPE	libs/spdlog/fmt/bundled/format.h	2552;"	d
FMT_MAKE_STR_VALUE	libs/spdlog/fmt/bundled/format.h	1494;"	d
FMT_MAKE_TEMPLATE_ARG	libs/spdlog/fmt/bundled/format.h	2551;"	d
FMT_MAKE_VALUE	libs/spdlog/fmt/bundled/format.h	1438;"	d
FMT_MAKE_VALUE_	libs/spdlog/fmt/bundled/format.h	1434;"	d
FMT_MAKE_WSTR_VALUE	libs/spdlog/fmt/bundled/format.h	1508;"	d
FMT_MSC_VER	libs/spdlog/fmt/bundled/format.h	54;"	d
FMT_MSC_VER	libs/spdlog/fmt/bundled/format.h	56;"	d
FMT_NOEXCEPT	libs/spdlog/fmt/bundled/format.h	/^                                  fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	libs/spdlog/fmt/bundled/format.h	188;"	d
FMT_NOEXCEPT	libs/spdlog/fmt/bundled/format.h	190;"	d
FMT_NOEXCEPT	libs/spdlog/fmt/bundled/format.h	193;"	d
FMT_OSTREAM_H_	libs/spdlog/fmt/bundled/ostream.h	11;"	d
FMT_POWERS_OF_10	libs/spdlog/fmt/bundled/format.cc	271;"	d	file:
FMT_PRINTF_H_	libs/spdlog/fmt/bundled/printf.h	11;"	d
FMT_SECURE_SCL	libs/spdlog/fmt/bundled/format.h	44;"	d
FMT_SECURE_SCL	libs/spdlog/fmt/bundled/format.h	46;"	d
FMT_SNPRINTF	libs/spdlog/fmt/bundled/format.cc	92;"	d	file:
FMT_SPECIALIZE_MAKE_UNSIGNED	libs/spdlog/fmt/bundled/format.h	614;"	d
FMT_STATIC_ASSERT	libs/spdlog/fmt/bundled/format.h	1363;"	d
FMT_STATIC_ASSERT	libs/spdlog/fmt/bundled/format.h	1366;"	d
FMT_SWPRINTF	libs/spdlog/fmt/bundled/format.cc	105;"	d	file:
FMT_THROW	libs/spdlog/fmt/bundled/format.h	172;"	d
FMT_THROW	libs/spdlog/fmt/bundled/format.h	174;"	d
FMT_TRY	libs/spdlog/fmt/bundled/format.cc	58;"	d	file:
FMT_UNUSED	libs/spdlog/fmt/bundled/format.h	1352;"	d
FMT_UNUSED	libs/spdlog/fmt/bundled/format.h	1354;"	d
FMT_USE_DELETED_FUNCTIONS	libs/spdlog/fmt/bundled/format.h	200;"	d
FMT_USE_EXTERN_TEMPLATES	libs/spdlog/fmt/bundled/format.h	978;"	d
FMT_USE_NOEXCEPT	libs/spdlog/fmt/bundled/format.h	180;"	d
FMT_USE_RVALUE_REFERENCES	libs/spdlog/fmt/bundled/format.h	147;"	d
FMT_USE_RVALUE_REFERENCES	libs/spdlog/fmt/bundled/format.h	149;"	d
FMT_USE_STATIC_ASSERT	libs/spdlog/fmt/bundled/format.h	1358;"	d
FMT_USE_USER_DEFINED_LITERALS	libs/spdlog/fmt/bundled/format.h	221;"	d
FMT_USE_VARIADIC_TEMPLATES	libs/spdlog/fmt/bundled/format.h	138;"	d
FMT_USE_WINDOWS_H	libs/spdlog/fmt/bundled/format.h	1094;"	d
FMT_USE_WINDOWS_H	libs/spdlog/fmt/bundled/format.h	1096;"	d
FMT_USE_WINDOWS_H	libs/spdlog/fmt/fmt.h	19;"	d
FMT_VARIADIC_CTOR	libs/spdlog/fmt/bundled/format.h	2571;"	d
FMT_VARIADIC_VOID	libs/spdlog/fmt/bundled/format.h	2561;"	d
FPUtil	libs/spdlog/fmt/bundled/format.h	/^typedef std::numeric_limits<fmt::internal::DummyInt> FPUtil;$/;"	t	namespace:fmt::internal
F_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class F_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
False	libs/spdlog/fmt/bundled/format.h	/^struct False$/;"	s	namespace:fmt::internal
Fatal	easylogging++.h	/^        Fatal = 8,$/;"	m	class:el::Level
File	easylogging++.h	/^                                class File : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
File	easylogging++.h	/^                            DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
FileBase	easylogging++.h	/^                            Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
FileStreamPtr	easylogging++.h	/^    typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
Filename	easylogging++.h	/^            Filename = 16,$/;"	m	class:el::Level::ConfigurationType
FixedBuffer	libs/spdlog/fmt/bundled/format.h	/^    FixedBuffer(Char *array, std::size_t size) : fmt::Buffer<Char>(array, size) {}$/;"	f	class:fmt::internal::FixedBuffer
FixedBuffer	libs/spdlog/fmt/bundled/format.h	/^class FixedBuffer : public fmt::Buffer<Char>$/;"	c	namespace:fmt::internal
FixedTimeFormat	easylogging++.h	/^                FixedTimeFormat = 16384$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
FormStartingPoint	test.cp	/^PetscErrorCode FormStartingPoint(Vec X)$/;"	f
Format	easylogging++.h	/^            Format = 8,$/;"	m	class:el::Level::ConfigurationType
FormatBuf	libs/spdlog/fmt/bundled/ostream.h	/^    FormatBuf(Buffer<Char> &buffer) : buffer_(buffer), start_(&buffer[0])$/;"	f	class:fmt::internal::FormatBuf
FormatBuf	libs/spdlog/fmt/bundled/ostream.h	/^class FormatBuf : public std::basic_streambuf<Char>$/;"	c	namespace:fmt::internal
FormatError	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fmt::FormatError
FormatError	libs/spdlog/fmt/bundled/format.h	/^class FormatError : public std::runtime_error$/;"	c	namespace:fmt
FormatFlags	easylogging++.h	/^                        enum class FormatFlags : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
FormatFunc	libs/spdlog/fmt/bundled/format.cc	/^typedef void (*FormatFunc)(Writer &, int, StringRef);$/;"	t	namespace:fmt::__anon34	file:
FormatFunc	libs/spdlog/fmt/bundled/format.h	/^    typedef void (*FormatFunc)($/;"	t	struct:fmt::internal::Value
FormatInt	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:FormatInt
FormatInt	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(ULongLong value) : str_(format_decimal(value)) {}$/;"	f	class:FormatInt
FormatInt	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(int value)$/;"	f	class:FormatInt
FormatInt	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(long value)$/;"	f	class:FormatInt
FormatInt	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:FormatInt
FormatInt	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:FormatInt
FormatInt	libs/spdlog/fmt/bundled/format.h	/^class FormatInt$/;"	c
FormatSigned	libs/spdlog/fmt/bundled/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:FormatInt
FormatSpec	libs/spdlog/fmt/bundled/format.h	/^    FormatSpec($/;"	f	struct:fmt::FormatSpec
FormatSpec	libs/spdlog/fmt/bundled/format.h	/^struct FormatSpec : AlignSpec$/;"	s	namespace:fmt
FormatSpecifierValueResolver	easylogging++.h	/^typedef std::function<const char*(void)> FormatSpecifierValueResolver;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
FormatterBase	libs/spdlog/fmt/bundled/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fmt::internal::FormatterBase
FormatterBase	libs/spdlog/fmt/bundled/format.h	/^class FormatterBase$/;"	c	namespace:fmt::internal
Function	easylogging++.h	/^                            DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
GREEN	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
GREENS_FCT_CPP_	GreensFct.cpp	2;"	d	file:
GREENS_FCT_H_	GreensFct.hpp	2;"	d
Global	easylogging++.h	/^        Global = 1,$/;"	m	class:el::Level
GreensFunction	GreensFct.hpp	/^		GreensFunction(RealT U, RealT beta): U(U), beta(beta)$/;"	f	class:GreensFunction
GreensFunction	GreensFct.hpp	/^class GreensFunction\/\/: public VecExpression<GreensFct>$/;"	c
HASH_FLAG	libs/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
H_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class H_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
HierarchicalLogging	easylogging++.h	/^                HierarchicalLogging = 2048,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
HitCounter	easylogging++.h	/^        HitCounter(const HitCounter& hitCounter) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
HitCounter	easylogging++.h	/^        HitCounter(const char* filename, unsigned long int lineNumber) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
HitCounter	easylogging++.h	/^        HitCounter(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
HitCounter	easylogging++.h	/^    class HitCounter {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
Host	easylogging++.h	/^                            User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Hour	easylogging++.h	/^                        Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Hybridization	DataStructs.h	/^typedef Eigen::ArrayXcd Hybridization;$/;"	t
INFO	easylogging++.h	6070;"	d
INITIALIZE_EASYLOGGINGPP	easylogging++.h	6666;"	d
INITIALIZE_EASYLOGGINGPP	easylogging++.h	6671;"	d
INITIALIZE_NULL_EASYLOGGINGPP	easylogging++.h	6673;"	d
INLINE_BUFFER_SIZE	libs/spdlog/fmt/bundled/format.h	/^enum { INLINE_BUFFER_SIZE = 500 };$/;"	e	enum:fmt::internal::__anon20
INT	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
IOhelper	IOhelper.hpp	/^class IOhelper: public mglDraw$/;"	c
IWorker	easylogging++.h	/^        class IWorker {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base
I_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class I_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
ImTG	DataStructs.h	/^typedef Eigen::Array<RealT,_CONFIG_maxMatsFreq,_CONFIG_spins> ImTG;$/;"	t
ImmediateFlush	easylogging++.h	/^                ImmediateFlush = 16,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Info	easylogging++.h	/^        Info = 128,$/;"	m	class:el::Level
InitializeData	test.cp	/^PetscErrorCode InitializeData(AppCtx *user)$/;"	f
IntChecker	libs/spdlog/fmt/bundled/printf.h	/^struct IntChecker$/;"	s	namespace:fmt::internal
IntChecker	libs/spdlog/fmt/bundled/printf.h	/^struct IntChecker<true>$/;"	s	namespace:fmt::internal
IntFormatSpec	libs/spdlog/fmt/bundled/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fmt::IntFormatSpec
IntFormatSpec	libs/spdlog/fmt/bundled/format.h	/^class IntFormatSpec : public SpecT$/;"	c	namespace:fmt
IntTraits	libs/spdlog/fmt/bundled/format.h	/^struct IntTraits$/;"	s	namespace:fmt::internal
IsZeroInt	libs/spdlog/fmt/bundled/printf.h	/^class IsZeroInt : public ArgVisitor<IsZeroInt, bool>$/;"	c	namespace:fmt::internal
LAST_INTEGER_TYPE	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LAST_NUMERIC_TYPE	libs/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LConvCheck	libs/spdlog/fmt/bundled/format.h	/^    LConvCheck(int) {}$/;"	f	struct:fmt::internal::LConvCheck
LConvCheck	libs/spdlog/fmt/bundled/format.h	/^template <typename T, T> struct LConvCheck$/;"	s	namespace:fmt::internal
LOG	easylogging++.h	6364;"	d
LOG	easylogging++.h	6383;"	d
LOGGER_LEVEL_WRITERS	easylogging++.h	5197;"	d
LOGGER_LEVEL_WRITERS	easylogging++.h	5246;"	d
LOGGER_LEVEL_WRITERS_DISABLED	easylogging++.h	5206;"	d
LOGGER_LEVEL_WRITERS_DISABLED	easylogging++.h	5247;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	easylogging++.h	3568;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	easylogging++.h	3586;"	d
LOG_AFTER_N	easylogging++.h	6370;"	d
LOG_AFTER_N	easylogging++.h	6391;"	d
LOG_EVERY_N	easylogging++.h	6368;"	d
LOG_EVERY_N	easylogging++.h	6389;"	d
LOG_IF	easylogging++.h	6366;"	d
LOG_IF	easylogging++.h	6386;"	d
LOG_N_TIMES	easylogging++.h	6372;"	d
LOG_N_TIMES	easylogging++.h	6393;"	d
LONG_DOUBLE	libs/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LONG_LONG	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
Level	easylogging++.h	/^                            Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Level	easylogging++.h	/^    enum class Level : base::type::EnumType {$/;"	c	namespace:el
LevelHelper	easylogging++.h	/^        class LevelHelper : base::StaticClass {$/;"	c	class:el::Level
LevelShort	easylogging++.h	/^                            Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Line	easylogging++.h	/^                            DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Location	easylogging++.h	/^                            DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LogBuilder	easylogging++.h	/^    class LogBuilder : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LogBuilderPtr	easylogging++.h	/^    typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LogDetailedCrashReason	easylogging++.h	/^                LogDetailedCrashReason = 4,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
LogDispatchCallback	easylogging++.h	/^    class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LogDispatchCallbackPtr	easylogging++.h	/^            typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	namespace:el::base::type
LogDispatchData	easylogging++.h	/^        LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
LogDispatchData	easylogging++.h	/^    class LogDispatchData {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LogFlushThreshold	easylogging++.h	/^            LogFlushThreshold = 256,$/;"	m	class:el::Level::ConfigurationType
LogFormat	easylogging++.h	/^        LogFormat(Level level, const base::type::string_t& format)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
LogFormat	easylogging++.h	/^        LogFormat(LogFormat&& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
LogFormat	easylogging++.h	/^        LogFormat(const LogFormat& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
LogFormat	easylogging++.h	/^        LogFormat(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
LogFormat	easylogging++.h	/^    class LogFormat : public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LogMessage	easylogging++.h	/^                            User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LogMessage	easylogging++.h	/^        LogMessage(Level level, const std::string& file, unsigned long int line, const std::string& func,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
LogMessage	easylogging++.h	/^    class LogMessage {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LogStreamsReferenceMap	easylogging++.h	/^    typedef std::map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
Loggable	easylogging++.h	/^class Loggable {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Logger	easylogging++.h	/^        Logger(const Logger& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
Logger	easylogging++.h	/^        Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
Logger	easylogging++.h	/^        Logger(const std::string& id, const Configurations& configurations, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
Logger	easylogging++.h	/^    class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
LoggerId	easylogging++.h	/^                            DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LoggingFlag	easylogging++.h	/^            enum class LoggingFlag : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType
LongLong	libs/spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fmt
MAGENTA	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
MAIN_H_	main.h	3;"	d
MAKE_CONTAINERELPP_FRIENDLY	easylogging++.h	4874;"	d
MAKE_LOGGABLE	easylogging++.h	5670;"	d
MAX_PACKED_ARGS	libs/spdlog/fmt/bundled/format.h	/^    enum { MAX_PACKED_ARGS = 16 };$/;"	e	enum:fmt::ArgList::__anon31
MINUS_FLAG	libs/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
MKL_Complex16	Config.h	15;"	d
MKL_Complex8	Config.h	14;"	d
M_PI	Constants.h	2;"	d
M_PIl	Constants.h	3;"	d
M_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class M_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
MakeArg	libs/spdlog/fmt/bundled/format.h	/^    MakeArg()$/;"	f	class:fmt::internal::MakeArg
MakeArg	libs/spdlog/fmt/bundled/format.h	/^    MakeArg(const T &value)$/;"	f	class:fmt::internal::MakeArg
MakeArg	libs/spdlog/fmt/bundled/format.h	/^class MakeArg : public Arg$/;"	c	namespace:fmt::internal
MakeUnsigned	libs/spdlog/fmt/bundled/format.h	/^struct MakeUnsigned$/;"	s	namespace:fmt::internal
MakeValue	libs/spdlog/fmt/bundled/format.h	/^    MakeValue() {}$/;"	f	class:fmt::internal::MakeValue
MakeValue	libs/spdlog/fmt/bundled/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	libs/spdlog/fmt/bundled/format.h	/^    MakeValue(const T &value,$/;"	f	class:fmt::internal::MakeValue
MakeValue	libs/spdlog/fmt/bundled/format.h	/^    MakeValue(long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	libs/spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	libs/spdlog/fmt/bundled/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	libs/spdlog/fmt/bundled/format.h	/^class MakeValue : public Arg$/;"	c	namespace:fmt::internal
MapType	libs/spdlog/fmt/bundled/format.h	/^    std::pair<fmt::BasicStringRef<Char>, internal::Arg> > MapType;$/;"	t	class:fmt::internal::ArgMap
MatG	DataStructs.h	/^typedef Eigen::Array<ComplexT,_CONFIG_maxMatsFreq,_CONFIG_spins> MatG;$/;"	t
MatrixT	DataStructs.h	/^typedef Eigen::MatrixXd MatrixT;$/;"	t
MaxLogFileSize	easylogging++.h	/^            MaxLogFileSize = 128,$/;"	m	class:el::Level::ConfigurationType
MemoryBuffer	libs/spdlog/fmt/bundled/format.h	/^    MemoryBuffer(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	libs/spdlog/fmt/bundled/format.h	/^    explicit MemoryBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	libs/spdlog/fmt/bundled/format.h	/^class MemoryBuffer : private Allocator, public Buffer<T>$/;"	c	namespace:fmt::internal
MemoryWriter	libs/spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t
Microsecond	easylogging++.h	/^                        Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Millisecond	easylogging++.h	/^                        Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
MillisecondsWidth	easylogging++.h	/^                                MillisecondsWidth(void) { init(base::consts::kDefaultMillisecondsWidth); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
MillisecondsWidth	easylogging++.h	/^                                explicit MillisecondsWidth(int width) { init(width); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
MillisecondsWidth	easylogging++.h	/^                            class MillisecondsWidth {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
MillisecondsWidth	easylogging++.h	/^            MillisecondsWidth = 32,$/;"	m	class:el::Level::ConfigurationType
Minute	easylogging++.h	/^                        Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Ms	WeakCoupling.hpp	/^		MatrixT Ms[_CONFIG_spins];$/;"	m	class:WeakCoupling
MultiLoggerSupport	easylogging++.h	/^                MultiLoggerSupport = 128,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Mutex	easylogging++.h	/^                                        Mutex(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
Mutex	easylogging++.h	/^                                    class Mutex : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal
Mutex	easylogging++.h	/^                                typedef base::threading::internal::Mutex Mutex;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
NAMED_ARG	libs/spdlog/fmt/bundled/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NOBSERVATIONS	test.cp	42;"	d	file:
NOMINMAX	libs/spdlog/details/os.h	21;"	d
NOMINMAX	libs/spdlog/fmt/bundled/format.cc	49;"	d	file:
NOMINMAX	libs/spdlog/fmt/bundled/format.cc	51;"	d	file:
NONE	libs/spdlog/fmt/bundled/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NPARAMETERS	test.cp	43;"	d	file:
NamedArg	libs/spdlog/fmt/bundled/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArg
NamedArg	libs/spdlog/fmt/bundled/format.h	/^struct NamedArg : Arg$/;"	s	namespace:fmt::internal
NewLineForContainer	easylogging++.h	/^                NewLineForContainer = 1,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
No	libs/spdlog/fmt/bundled/format.h	/^typedef char No[2];$/;"	t	namespace:fmt::internal
NoCopy	easylogging++.h	/^            NoCopy(void) {}$/;"	f	class:el::base::NoCopy
NoCopy	easylogging++.h	/^        class NoCopy {$/;"	c	namespace:el::base
NoThousandsSep	libs/spdlog/fmt/bundled/format.h	/^struct NoThousandsSep$/;"	s	namespace:fmt::internal
None	easylogging++.h	/^        None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::DispatchAction
NormalLog	easylogging++.h	/^        None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::DispatchAction
Not	easylogging++.h	/^                                    static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
Not	libs/spdlog/fmt/bundled/format.h	/^struct Not$/;"	s	namespace:fmt::internal
Not	libs/spdlog/fmt/bundled/format.h	/^struct Not<false>$/;"	s	namespace:fmt::internal
Null	libs/spdlog/fmt/bundled/format.h	/^struct Null {};$/;"	s	namespace:fmt::internal
Or	easylogging++.h	/^                                    static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
PCHECK	easylogging++.h	6555;"	d
PCHECK	easylogging++.h	6569;"	d
PERFORMANCE_CHECKPOINT	easylogging++.h	6059;"	d
PERFORMANCE_CHECKPOINT	easylogging++.h	6061;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	easylogging++.h	6060;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	easylogging++.h	6062;"	d
PLOG	easylogging++.h	6398;"	d
PLOG	easylogging++.h	6412;"	d
PLOG_IF	easylogging++.h	6399;"	d
PLOG_IF	easylogging++.h	6413;"	d
PLUS_FLAG	libs/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
POINTER	libs/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
POWERS_OF_10_32	libs/spdlog/fmt/bundled/format.cc	/^const uint32_t internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_64	libs/spdlog/fmt/bundled/format.cc	/^const uint64_t internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fmt::internal::BasicData	file:
Pair	libs/spdlog/fmt/bundled/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fmt::internal::ArgMap
Parser	easylogging++.h	/^    class Parser : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
PerformanceTracking	easylogging++.h	/^            PerformanceTracking = 64,$/;"	m	class:el::Level::ConfigurationType
PerformanceTrackingCallback	easylogging++.h	/^    class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
PerformanceTrackingCallbackPtr	easylogging++.h	/^            typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	namespace:el::base::type
Potential	DataStructs.h	/^typedef Eigen::ArrayXXd Potential;$/;"	t
PreRollOutCallback	easylogging++.h	/^                typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag
PrecisionHandler	libs/spdlog/fmt/bundled/printf.h	/^class PrecisionHandler : public ArgVisitor<PrecisionHandler, int>$/;"	c	namespace:fmt::internal
Predicate	easylogging++.h	/^            Predicate(const char* filename, unsigned long int lineNumber)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter::Predicate
Predicate	easylogging++.h	/^        Predicate(Level level, ConfigurationType configurationType) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration::Predicate
Predicate	easylogging++.h	/^        class Predicate {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
Predicate	easylogging++.h	/^    class Predicate {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
PrintfArgFormatter	libs/spdlog/fmt/bundled/printf.h	/^    PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::PrintfArgFormatter
PrintfArgFormatter	libs/spdlog/fmt/bundled/printf.h	/^class PrintfArgFormatter$/;"	c	namespace:fmt
PrintfFormatter	libs/spdlog/fmt/bundled/printf.h	/^    explicit PrintfFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::PrintfFormatter
PrintfFormatter	libs/spdlog/fmt/bundled/printf.h	/^class PrintfFormatter : private internal::FormatterBase$/;"	c	namespace:fmt
RED	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
RESET_COLOR	libs/spdlog/fmt/bundled/format.cc	/^const char RESET_COLOR[] = "\\x1b[0m";$/;"	m	namespace:fmt::__anon34	file:
R_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class R_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
RealT	DataStructs.h	/^typedef double RealT;			\/\/ TODO: better adjustment for precision$/;"	t
RegisteredHitCounters	easylogging++.h	/^    class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCounter::Predicate> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
RegisteredLoggers	easylogging++.h	/^            explicit RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
RegisteredLoggers	easylogging++.h	/^        class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base
Registry	easylogging++.h	/^    Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
Registry	easylogging++.h	/^    Registry(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
Registry	easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::map<T_Key, T_Ptr*>> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
RegistryWithPred	easylogging++.h	/^    RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
RegistryWithPred	easylogging++.h	/^    RegistryWithPred(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
RegistryWithPred	easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
RowVectorT	DataStructs.h	/^typedef Eigen::RowVectorXd RowVectorT;$/;"	t
RuntimeError	libs/spdlog/fmt/bundled/format.h	/^    RuntimeError() : std::runtime_error("") {}$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	libs/spdlog/fmt/bundled/format.h	/^class RuntimeError : public std::runtime_error$/;"	c	namespace:fmt::internal
SConfig	StrongCoupling.h	/^	typedef std::pair<const double,const char> SConfig;$/;"	t	class:StrongCoupling
SConfig	WeakCoupling.hpp	/^		typedef std::tuple<double, char> SConfig;					\/\/ time, spin, sign$/;"	t	class:WeakCoupling
SConfigL	StrongCoupling.h	/^        typedef SConfigSOL SConfigL;$/;"	t	class:StrongCoupling
SConfigL	StrongCoupling.h	/^        typedef SConfigTOL SConfigL;                                            \/\/ TODO: switch to Boost::set$/;"	t	class:StrongCoupling
SConfigL	WeakCoupling.hpp	/^			typedef SConfigSOL SConfigL;$/;"	t	class:WeakCoupling
SConfigL	WeakCoupling.hpp	/^			typedef SConfigTOL SConfigL; 						\/\/ TODO: switch to Boost::set$/;"	t	class:WeakCoupling
SConfigSOL	StrongCoupling.h	/^	typedef std::vector<SConfig> SConfigSOL;                                        \/\/ Ordered by time of generation$/;"	t	class:StrongCoupling
SConfigSOL	WeakCoupling.hpp	/^		typedef std::vector<SConfig> SConfigSOL; 					\/\/ Ordered by time of generation$/;"	t	class:WeakCoupling
SConfigTOL	StrongCoupling.h	/^	typedef std::set<SConfig, compare> SConfigTOL;                                  \/\/ Time orderer list (set)$/;"	t	class:StrongCoupling
SConfigTOL	WeakCoupling.hpp	/^		typedef std::set<SConfig, compare> SConfigTOL;  				\/\/ Time orderer list (set)$/;"	t	class:WeakCoupling
SEED	test_sprng.cpp	15;"	d	file:
SHARE_EASYLOGGINGPP	easylogging++.h	6682;"	d
SIGN_FLAG	libs/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
SIMPLE_SPRNG	DataStructs.h	25;"	d
SIMPLE_SPRNG	test_sprng.cpp	11;"	d	file:
SPDLOG_CONSTEXPR	libs/spdlog/common.h	26;"	d
SPDLOG_CONSTEXPR	libs/spdlog/common.h	29;"	d
SPDLOG_DEBUG	libs/spdlog/spdlog.h	161;"	d
SPDLOG_DEBUG	libs/spdlog/spdlog.h	163;"	d
SPDLOG_EOL	libs/spdlog/details/os.h	130;"	d
SPDLOG_EOL	libs/spdlog/details/os.h	132;"	d
SPDLOG_FILENAME_T	libs/spdlog/details/os.h	319;"	d
SPDLOG_FILENAME_T	libs/spdlog/details/os.h	326;"	d
SPDLOG_NOEXCEPT	libs/spdlog/common.h	25;"	d
SPDLOG_NOEXCEPT	libs/spdlog/common.h	28;"	d
SPDLOG_NOEXCEPT	libs/spdlog/details/async_log_helper.h	/^async_msg(async_msg&& other) SPDLOG_NOEXCEPT:$/;"	m	struct:spdlog::details::async_log_helper::async_msg
SPDLOG_STR_H	libs/spdlog/spdlog.h	153;"	d
SPDLOG_STR_HELPER	libs/spdlog/spdlog.h	154;"	d
SPDLOG_TRACE	libs/spdlog/spdlog.h	155;"	d
SPDLOG_TRACE	libs/spdlog/spdlog.h	157;"	d
START_EASYLOGGINGPP	easylogging++.h	6691;"	d
START_EASYLOGGINGPP	easylogging++.h	6693;"	d
STRCAT	easylogging++.h	221;"	d
STRCAT	easylogging++.h	226;"	d
STRCAT	easylogging++.h	231;"	d
STRCPY	easylogging++.h	222;"	d
STRCPY	easylogging++.h	227;"	d
STRCPY	easylogging++.h	232;"	d
STRERROR	easylogging++.h	220;"	d
STRERROR	easylogging++.h	225;"	d
STRERROR	easylogging++.h	230;"	d
STRING	libs/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
STRONG_COUPLING_H_	StrongCoupling.h	2;"	d
STRTOK	easylogging++.h	219;"	d
STRTOK	easylogging++.h	224;"	d
STRTOK	easylogging++.h	229;"	d
SYSLOG	easylogging++.h	6422;"	d
SYSLOG	easylogging++.h	6445;"	d
SYSLOG	easylogging++.h	6470;"	d
SYSLOG_AFTER_N	easylogging++.h	6425;"	d
SYSLOG_AFTER_N	easylogging++.h	6448;"	d
SYSLOG_AFTER_N	easylogging++.h	6473;"	d
SYSLOG_EVERY_N	easylogging++.h	6424;"	d
SYSLOG_EVERY_N	easylogging++.h	6447;"	d
SYSLOG_EVERY_N	easylogging++.h	6472;"	d
SYSLOG_IF	easylogging++.h	6423;"	d
SYSLOG_IF	easylogging++.h	6446;"	d
SYSLOG_IF	easylogging++.h	6471;"	d
SYSLOG_N_TIMES	easylogging++.h	6426;"	d
SYSLOG_N_TIMES	easylogging++.h	6449;"	d
SYSLOG_N_TIMES	easylogging++.h	6474;"	d
S_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class S_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
ScopedLock	easylogging++.h	/^                                        explicit ScopedLock(M& mutex) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
ScopedLock	easylogging++.h	/^                                    class ScopedLock : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal
ScopedLock	easylogging++.h	/^                                typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
Second	easylogging++.h	/^                        Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
SignChecker	libs/spdlog/fmt/bundled/format.h	/^struct SignChecker$/;"	s	namespace:fmt::internal
SignChecker	libs/spdlog/fmt/bundled/format.h	/^struct SignChecker<false>$/;"	s	namespace:fmt::internal
StaticClass	easylogging++.h	/^        class StaticClass {$/;"	c	namespace:el::base
Storage	easylogging++.h	/^            Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
Storage	easylogging++.h	/^        class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base
StoragePointer	easylogging++.h	/^            typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	namespace:el::base::type
StrFormatSpec	libs/spdlog/fmt/bundled/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fmt::StrFormatSpec
StrFormatSpec	libs/spdlog/fmt/bundled/format.h	/^class StrFormatSpec : public AlignSpec$/;"	c	namespace:fmt
StrictLogFileSizeCheck	easylogging++.h	/^                StrictLogFileSizeCheck = 32,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
StringRef	libs/spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fmt
StringValue	libs/spdlog/fmt/bundled/format.h	/^    struct StringValue$/;"	s	struct:fmt::internal::Value
StrongCoupling	StrongCoupling.h	/^class StrongCoupling$/;"	c
Supported	libs/spdlog/fmt/bundled/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	libs/spdlog/fmt/bundled/format.h	/^    typedef T Supported;$/;"	t	struct:fmt::internal::WCharHelper
SysLog	easylogging++.h	/^        None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::DispatchAction
SystemError	libs/spdlog/fmt/bundled/format.h	/^    SystemError() {}$/;"	f	class:SystemError
SystemError	libs/spdlog/fmt/bundled/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:SystemError
SystemError	libs/spdlog/fmt/bundled/format.h	/^class SystemError : public internal::RuntimeError$/;"	c
T	GreensFct.hpp	/^		template <class T> RealT operator()(T) = delete; \/\/ C++11$/;"	m	class:GreensFunction
TIMED_BLOCK	easylogging++.h	6033;"	d
TIMED_BLOCK	easylogging++.h	6050;"	d
TIMED_FUNC	easylogging++.h	6035;"	d
TIMED_FUNC	easylogging++.h	6058;"	d
TIMED_SCOPE	easylogging++.h	6034;"	d
TIMED_SCOPE	easylogging++.h	6049;"	d
TRACE	easylogging++.h	6075;"	d
T_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class T_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
ThousandsSep	libs/spdlog/fmt/bundled/format.h	/^    explicit ThousandsSep(fmt::StringRef sep) : sep_(sep), digit_index_(0) {}$/;"	f	class:fmt::internal::ThousandsSep
ThousandsSep	libs/spdlog/fmt/bundled/format.h	/^class ThousandsSep$/;"	c	namespace:fmt::internal
ThreadId	easylogging++.h	/^                            User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
ThreadSafe	easylogging++.h	/^                                    ThreadSafe(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
ThreadSafe	easylogging++.h	/^                                class ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
TimestampUnit	easylogging++.h	/^                    enum class TimestampUnit : base::type::EnumType {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base
ToFile	easylogging++.h	/^            ToFile = 2,$/;"	m	class:el::Level::ConfigurationType
ToStandardOutput	easylogging++.h	/^            ToStandardOutput = 4,$/;"	m	class:el::Level::ConfigurationType
Trace	easylogging++.h	/^        Trace = 2,$/;"	m	class:el::Level
Type	libs/spdlog/fmt/bundled/format.h	/^    enum Type$/;"	g	struct:fmt::internal::Value
Type	libs/spdlog/fmt/bundled/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fmt::ArgArray
Type	libs/spdlog/fmt/bundled/format.h	/^    typedef T Type;$/;"	t	struct:fmt::internal::MakeUnsigned
Type	libs/spdlog/fmt/bundled/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	libs/spdlog/fmt/bundled/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fmt::internal::TypeSelector
TypeSelector	libs/spdlog/fmt/bundled/format.h	/^    TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fmt::internal::IntTraits
TypeSelector	libs/spdlog/fmt/bundled/format.h	/^struct TypeSelector$/;"	s	namespace:fmt::internal
TypeSelector	libs/spdlog/fmt/bundled/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fmt::internal
TypeSpec	libs/spdlog/fmt/bundled/format.h	/^struct TypeSpec : EmptySpec$/;"	s	namespace:fmt
TypedConfigurations	easylogging++.h	/^        TypedConfigurations(Configurations* configurations, base::LogStreamsReferenceMap* logStreamsReference) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
TypedConfigurations	easylogging++.h	/^        TypedConfigurations(const TypedConfigurations& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
TypedConfigurations	easylogging++.h	/^    class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
U	GreensFct.hpp	/^		RealT U;$/;"	m	class:GreensFunction
U	WeakCoupling.hpp	/^		const RealT U;$/;"	m	class:WeakCoupling
UINT	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULONG_LONG	libs/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULongLong	libs/spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fmt
USE_MPI	test_sprng.cpp	12;"	d	file:
UTF16ToUTF8	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::UTF16ToUTF8::UTF16ToUTF8(WStringRef s) {$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	libs/spdlog/fmt/bundled/format.h	/^    UTF16ToUTF8() {}$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	libs/spdlog/fmt/bundled/format.h	/^class UTF16ToUTF8$/;"	c	namespace:fmt::internal
UTF8ToUTF16	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::UTF8ToUTF16::UTF8ToUTF16(StringRef s) {$/;"	f	class:fmt::internal::UTF8ToUTF16
UTF8ToUTF16	libs/spdlog/fmt/bundled/format.h	/^class UTF8ToUTF16$/;"	c	namespace:fmt::internal
Unknown	easylogging++.h	/^            Unknown = 1010$/;"	m	class:el::Level::ConfigurationType
Unknown	easylogging++.h	/^        Unknown = 1010$/;"	m	class:el::Level
Unsupported	libs/spdlog/fmt/bundled/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	libs/spdlog/fmt/bundled/format.h	/^    typedef T Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
User	easylogging++.h	/^                            User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
VERBOSE	easylogging++.h	6076;"	d
VLOG	easylogging++.h	6365;"	d
VLOG	easylogging++.h	6384;"	d
VLOG_AFTER_N	easylogging++.h	6371;"	d
VLOG_AFTER_N	easylogging++.h	6392;"	d
VLOG_EVERY_N	easylogging++.h	6369;"	d
VLOG_EVERY_N	easylogging++.h	6390;"	d
VLOG_IF	easylogging++.h	6367;"	d
VLOG_IF	easylogging++.h	6387;"	d
VLOG_IS_ON	easylogging++.h	6030;"	d
VLOG_IS_ON	easylogging++.h	6032;"	d
VLOG_N_TIMES	easylogging++.h	6373;"	d
VLOG_N_TIMES	easylogging++.h	6394;"	d
VRegistry	easylogging++.h	/^            explicit VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(level), m_pFlags(pFlags) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
VRegistry	easylogging++.h	/^        class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base
Value	libs/spdlog/fmt/bundled/format.h	/^struct Value$/;"	s	namespace:fmt::internal
VectorT	DataStructs.h	/^typedef Eigen::VectorXd VectorT;$/;"	t
Verbose	easylogging++.h	/^        Verbose = 64,$/;"	m	class:el::Level
VerboseLevel	easylogging++.h	/^                            User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
VerboseLevel	easylogging++.h	/^            typedef int VerboseLevel;$/;"	t	namespace:el::base::type
WARNING	easylogging++.h	6071;"	d
WArrayWriter	libs/spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t
WCStringRef	libs/spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fmt
WCharHelper	libs/spdlog/fmt/bundled/format.h	/^struct WCharHelper$/;"	s	namespace:fmt::internal
WCharHelper	libs/spdlog/fmt/bundled/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fmt::internal
WEAK_COUPLING_H_	WeakCoupling.hpp	2;"	d
WHITE	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
WIN32_LEAN_AND_MEAN	libs/spdlog/details/os.h	25;"	d
WMemoryWriter	libs/spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t
WSTRING	libs/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
WStringRef	libs/spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fmt
WWriter	libs/spdlog/fmt/bundled/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fmt
Warning	easylogging++.h	/^        Warning = 32,$/;"	m	class:el::Level
WeakCoupling	WeakCoupling.cpp	/^WeakCoupling::WeakCoupling(GreensFct &g0, const RealT U, const RealT zeroShift, const RealT mu, const RealT beta, const unsigned int burninSteps): $/;"	f	class:WeakCoupling
WeakCoupling	WeakCoupling.hpp	/^class WeakCoupling$/;"	c
WeakCoupling	test_WeakCoulping.cpp	/^WeakCoupling::WeakCoupling()$/;"	f	class:WeakCoupling
WidthHandler	libs/spdlog/fmt/bundled/printf.h	/^    explicit WidthHandler(FormatSpec &spec) : spec_(spec) {}$/;"	f	class:fmt::internal::WidthHandler
WidthHandler	libs/spdlog/fmt/bundled/printf.h	/^class WidthHandler : public ArgVisitor<WidthHandler, unsigned>$/;"	c	namespace:fmt::internal
WidthSpec	libs/spdlog/fmt/bundled/format.h	/^    WidthSpec(unsigned width, wchar_t fill) : width_(width), fill_(fill) {}$/;"	f	struct:fmt::WidthSpec
WidthSpec	libs/spdlog/fmt/bundled/format.h	/^struct WidthSpec$/;"	s	namespace:fmt
WindowsError	libs/spdlog/fmt/bundled/format.h	/^    WindowsError(int error_code, CStringRef message)$/;"	f	class:WindowsError
WindowsError	libs/spdlog/fmt/bundled/format.h	/^class WindowsError : public SystemError$/;"	c
Writer	libs/spdlog/fmt/bundled/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fmt
Y	Session.vim	/^map Y y\$$/;"	m
YELLOW	libs/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
Y_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class Y_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Yes	libs/spdlog/fmt/bundled/format.h	/^typedef char Yes[1];$/;"	t	namespace:fmt::internal
['	Session.vim	/^nnoremap <silent> [' :call signature#mark#Goto("prev", "line", "pos")$/;"	m
[-	Session.vim	/^nnoremap <silent> [- :call signature#marker#Goto("prev", "same", v:count)$/;"	m
[=	Session.vim	/^nnoremap <silent> [= :call signature#marker#Goto("prev", "any",  v:count)$/;"	m
[`	Session.vim	/^nnoremap <silent> [` :call signature#mark#Goto("prev", "spot", "pos")$/;"	m
[c	Session.vim	/^nmap [c <Plug>GitGutterPrevHunk$/;"	m
]'	Session.vim	/^nnoremap <silent> ]' :call signature#mark#Goto("next", "line", "pos")$/;"	m
]-	Session.vim	/^nnoremap <silent> ]- :call signature#marker#Goto("next", "same", v:count)$/;"	m
]=	Session.vim	/^nnoremap <silent> ]= :call signature#marker#Goto("next", "any",  v:count)$/;"	m
]`	Session.vim	/^nnoremap <silent> ]` :call signature#mark#Goto("next", "spot", "pos")$/;"	m
]c	Session.vim	/^nmap ]c <Plug>GitGutterNextHunk$/;"	m
_CONFIG_maxMatsFreq	Config.h	/^static const	      int _CONFIG_maxMatsFreq = 1024;\/\/4096;		\/\/ frequencies go from maxMatsFreq\/2 to maxMatsFreq\/2 - 1$/;"	v
_CONFIG_maxTBins	Config.h	/^static const          int _CONFIG_maxTBins = 1024;\/\/4096; 		\/\/ (default default 131072, 65536) powers of 2 make fft faster, both bins need to be equal for FFT$/;"	v
_CONFIG_spins	Config.h	/^static const          int _CONFIG_spins = 2;			\/\/ number of possible spin positions$/;"	v
_IOHELPER_H_	IOhelper.hpp	2;"	d
_TEST_fftw3	fft.cpp	/^void _TEST_fftw3(void)$/;"	f
_TEST_naive2Impl	fft.cpp	/^void _TEST_naive2Impl(fftw_complex* input,fftw_complex* output, RealT beta)$/;"	f
_TEST_naiveImpl	fft.cpp	/^void _TEST_naiveImpl(fftw_complex* input,fftw_complex* output, RealT beta)$/;"	f
__FUNCT__	test.cp	121;"	d	file:
__FUNCT__	test.cp	122;"	d	file:
__FUNCT__	test.cp	145;"	d	file:
__FUNCT__	test.cp	146;"	d	file:
__FUNCT__	test.cp	176;"	d	file:
__FUNCT__	test.cp	177;"	d	file:
__FUNCT__	test.cp	193;"	d	file:
__FUNCT__	test.cp	194;"	d	file:
__FUNCT__	test.cp	63;"	d	file:
__FUNCT__	test.cp	64;"	d	file:
__FUNCT__	test_SLEPc.cpp	28;"	d	file:
__FUNCT__	test_SLEPc.cpp	29;"	d	file:
_async_log_helper	libs/spdlog/async_logger.h	/^    std::unique_ptr<details::async_log_helper> _async_log_helper;$/;"	m	class:spdlog::async_logger
_async_mode	libs/spdlog/details/registry.h	/^    bool _async_mode = false;$/;"	m	class:spdlog::details::registry_t
_async_q_size	libs/spdlog/details/registry.h	/^    size_t _async_q_size = 0;$/;"	m	class:spdlog::details::registry_t
_base_filename	libs/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::daily_file_sink
_base_filename	libs/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::rotating_file_sink
_ch	libs/spdlog/details/pattern_formatter_impl.h	/^    char _ch;$/;"	m	class:spdlog::details::ch_formatter
_current_size	libs/spdlog/sinks/file_sinks.h	/^    std::size_t _current_size;$/;"	m	class:spdlog::sinks::rotating_file_sink
_default_err_handler	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_default_err_handler(const std::string &msg)$/;"	f	class:spdlog::logger
_ecvt_s	libs/spdlog/fmt/bundled/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fmt::internal
_err_handler	libs/spdlog/details/async_log_helper.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::async_log_helper
_err_handler	libs/spdlog/details/registry.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::registry_t
_err_handler	libs/spdlog/logger.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::logger
_extension	libs/spdlog/sinks/file_sinks.h	/^    filename_t _extension;$/;"	m	class:spdlog::sinks::daily_file_sink
_extension	libs/spdlog/sinks/file_sinks.h	/^    filename_t _extension;$/;"	m	class:spdlog::sinks::rotating_file_sink
_fd	libs/spdlog/details/file_helper.h	/^    FILE* _fd;$/;"	m	class:spdlog::details::file_helper
_file_helper	libs/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::daily_file_sink
_file_helper	libs/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::rotating_file_sink
_file_helper	libs/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::simple_file_sink
_filename	libs/spdlog/details/file_helper.h	/^    filename_t _filename;    $/;"	m	class:spdlog::details::file_helper
_finite	libs/spdlog/fmt/bundled/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fmt::internal
_flush_interval_ms	libs/spdlog/details/async_log_helper.h	/^    const std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::async_log_helper
_flush_interval_ms	libs/spdlog/details/registry.h	/^    std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::registry_t
_flush_level	libs/spdlog/logger.h	/^    spdlog::level_t _flush_level;$/;"	m	class:spdlog::logger
_flush_requested	libs/spdlog/details/async_log_helper.h	/^    bool _flush_requested;$/;"	m	class:spdlog::details::async_log_helper
_force_flush	libs/spdlog/sinks/file_sinks.h	/^	bool _force_flush;$/;"	m	class:spdlog::sinks::simple_file_sink
_force_flush	libs/spdlog/sinks/ostream_sink.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::ostream_sink
_formatter	libs/spdlog/details/async_log_helper.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::async_log_helper
_formatter	libs/spdlog/details/registry.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::registry_t
_formatter	libs/spdlog/logger.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::logger
_formatters	libs/spdlog/formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> _formatters;$/;"	m	class:spdlog::pattern_formatter
_ident	libs/spdlog/sinks/syslog_sink.h	/^    const std::string _ident;$/;"	m	class:spdlog::sinks::syslog_sink
_isnan	libs/spdlog/fmt/bundled/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fmt::internal
_last_err_time	libs/spdlog/logger.h	/^    std::atomic<time_t> _last_err_time;$/;"	m	class:spdlog::logger
_last_update	libs/spdlog/details/pattern_formatter_impl.h	/^    log_clock::time_point _last_update;$/;"	m	class:spdlog::details::z_formatter
_level	libs/spdlog/details/registry.h	/^    level::level_enum _level = level::info;$/;"	m	class:spdlog::details::registry_t
_level	libs/spdlog/logger.h	/^    spdlog::level_t _level;$/;"	m	class:spdlog::logger
_level	libs/spdlog/sinks/sink.h	/^    level_t _level;$/;"	m	class:spdlog::sinks::sink
_loggers	libs/spdlog/details/registry.h	/^    std::unordered_map <std::string, std::shared_ptr<logger>> _loggers;$/;"	m	class:spdlog::details::registry_t
_max_files	libs/spdlog/sinks/file_sinks.h	/^    std::size_t _max_files;$/;"	m	class:spdlog::sinks::rotating_file_sink
_max_size	libs/spdlog/sinks/file_sinks.h	/^    std::size_t _max_size;$/;"	m	class:spdlog::sinks::rotating_file_sink
_msg	libs/spdlog/common.h	/^    std::string _msg;$/;"	m	class:spdlog::spdlog_ex
_mutex	libs/spdlog/details/pattern_formatter_impl.h	/^    std::mutex _mutex;$/;"	m	class:spdlog::details::z_formatter
_mutex	libs/spdlog/details/registry.h	/^    Mutex _mutex;$/;"	m	class:spdlog::details::registry_t
_mutex	libs/spdlog/sinks/base_sink.h	/^    Mutex _mutex;$/;"	m	class:spdlog::sinks::base_sink
_name	libs/spdlog/logger.h	/^    const std::string _name;$/;"	m	class:spdlog::logger
_next_rotation_tp	libs/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _next_rotation_tp()$/;"	f	class:spdlog::sinks::daily_file_sink
_offset_minutes	libs/spdlog/details/pattern_formatter_impl.h	/^    int _offset_minutes;$/;"	m	class:spdlog::details::z_formatter
_ostream	libs/spdlog/sinks/ostream_sink.h	/^    std::ostream& _ostream;$/;"	m	class:spdlog::sinks::ostream_sink
_overflow_policy	libs/spdlog/details/async_log_helper.h	/^    const async_overflow_policy _overflow_policy;$/;"	m	class:spdlog::details::async_log_helper
_overflow_policy	libs/spdlog/details/registry.h	/^    async_overflow_policy _overflow_policy = async_overflow_policy::block_retry;$/;"	m	class:spdlog::details::registry_t
_pattern	libs/spdlog/formatter.h	/^    const std::string _pattern;$/;"	m	class:spdlog::pattern_formatter
_priorities	libs/spdlog/sinks/syslog_sink.h	/^    std::array<int, 7> _priorities;$/;"	m	class:spdlog::sinks::syslog_sink
_q	libs/spdlog/details/async_log_helper.h	/^    q_type _q;$/;"	m	class:spdlog::details::async_log_helper
_rotate	libs/spdlog/sinks/file_sinks.h	/^    void _rotate()$/;"	f	class:spdlog::sinks::rotating_file_sink
_rotation_h	libs/spdlog/sinks/file_sinks.h	/^    int _rotation_h;$/;"	m	class:spdlog::sinks::daily_file_sink
_rotation_m	libs/spdlog/sinks/file_sinks.h	/^    int _rotation_m;$/;"	m	class:spdlog::sinks::daily_file_sink
_rotation_tp	libs/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _rotation_tp;$/;"	m	class:spdlog::sinks::daily_file_sink
_set_formatter	libs/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::async_logger
_set_formatter	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
_set_pattern	libs/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_pattern(const std::string& pattern)$/;"	f	class:spdlog::async_logger
_set_pattern	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_pattern(const std::string& pattern)$/;"	f	class:spdlog::logger
_should_flush_on	libs/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::_should_flush_on(const details::log_msg &msg)$/;"	f	class:spdlog::logger
_sink_it	libs/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_sink_it(details::log_msg& msg)$/;"	f	class:spdlog::async_logger
_sink_it	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_sink_it(details::log_msg& msg)$/;"	f	class:spdlog::logger
_sinks	libs/spdlog/details/async_log_helper.h	/^    std::vector<std::shared_ptr<sinks::sink>> _sinks;$/;"	m	class:spdlog::details::async_log_helper
_sinks	libs/spdlog/logger.h	/^    std::vector<sink_ptr> _sinks;$/;"	m	class:spdlog::logger
_sinks	libs/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> _sinks;$/;"	m	class:spdlog::sinks::dist_sink
_str	libs/spdlog/details/pattern_formatter_impl.h	/^    std::string _str;$/;"	m	class:spdlog::details::aggregate_formatter
_tag	libs/spdlog/sinks/android_sink.h	/^    std::string _tag;$/;"	m	class:spdlog::sinks::android_sink
_terminate_requested	libs/spdlog/details/async_log_helper.h	/^    bool _terminate_requested;$/;"	m	class:spdlog::details::async_log_helper
_worker_teardown_cb	libs/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_teardown_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_teardown_cb	libs/spdlog/details/registry.h	/^    std::function<void()> _worker_teardown_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
_worker_thread	libs/spdlog/details/async_log_helper.h	/^    std::thread _worker_thread;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	libs/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_warmup_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	libs/spdlog/details/registry.h	/^    std::function<void()> _worker_warmup_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
`[	Session.vim	/^nnoremap <silent> `[ :call signature#mark#Goto("prev", "spot", "alpha")$/;"	m
`]	Session.vim	/^nnoremap <silent> `] :call signature#mark#Goto("next", "spot", "alpha")$/;"	m
a_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class a_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
abort	easylogging++.h	/^                                static inline void abort(int status, const std::string& reason = std::string()) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
ac	Session.vim	/^omap ac <Plug>GitGutterTextObjectOuterPending$/;"	m
acceptanceR	StrongCoupling.cpp	/^RealT StrongCoupling::acceptanceR(const RealT U,const RealT beta) const$/;"	f	class:StrongCoupling
acceptanceR	test_WeakCoulping.cpp	/^double WeakCoupling::acceptanceR(MatrixT *M, MatrixT *U, MatrixT *G0, SConfig *config)$/;"	f	class:WeakCoupling
addFlag	easylogging++.h	/^                                static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
addFlag	easylogging++.h	/^            inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
addFlag	easylogging++.h	/^        inline void addFlag(base::FormatFlags flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
add_ch	libs/spdlog/details/pattern_formatter_impl.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::aggregate_formatter
add_sink	libs/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
aggregate_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^    aggregate_formatter()$/;"	f	class:spdlog::details::aggregate_formatter
aggregate_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class aggregate_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
align	libs/spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::AlignSpec
align	libs/spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::TypeSpec
align_	libs/spdlog/fmt/bundled/format.h	/^    Alignment align_;$/;"	m	struct:fmt::AlignSpec
allowed	easylogging++.h	/^            bool allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
ampm	libs/spdlog/details/pattern_formatter_impl.h	/^static const char* ampm(const tm& t)$/;"	f	namespace:spdlog::details
android_logger	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::android_logger(const std::string& logger_name, const std::string& tag)$/;"	f	class:spdlog
android_sink	libs/spdlog/sinks/android_sink.h	/^    explicit android_sink(const std::string& tag = "spdlog"): _tag(tag) {}$/;"	f	class:spdlog::sinks::android_sink
android_sink	libs/spdlog/sinks/android_sink.h	/^class android_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	libs/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	libs/spdlog/sinks/ansicolor_sink.h	/^inline ansicolor_sink::ansicolor_sink(sink_ptr wrapped_sink) : sink_(wrapped_sink)$/;"	f	class:spdlog::sinks::ansicolor_sink
append	libs/spdlog/fmt/bundled/format.h	/^void Buffer<T>::append(const U *begin, const U *end)$/;"	f	class:fmt::Buffer
append_float_length	libs/spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&, T) {}$/;"	f	class:BasicWriter
append_float_length	libs/spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:BasicWriter
apply_all	libs/spdlog/details/registry.h	/^    void apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog::details::registry_t
apply_all	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog
approx_size	libs/spdlog/details/mpmc_bounded_q.h	/^    size_t approx_size()$/;"	f	class:spdlog::details::mpmc_bounded_queue
arg	libs/spdlog/fmt/bundled/format.h	/^inline internal::NamedArg<char> arg(StringRef name, const T &arg)$/;"	f
arg	libs/spdlog/fmt/bundled/format.h	/^inline internal::NamedArg<wchar_t> arg(WStringRef name, const T &arg)$/;"	f
arg_	libs/spdlog/fmt/bundled/printf.h	/^    internal::Arg &arg_;$/;"	m	class:fmt::internal::ArgConverter
arg_	libs/spdlog/fmt/bundled/printf.h	/^    internal::Arg &arg_;$/;"	m	class:fmt::internal::CharConverter
args	libs/spdlog/fmt/bundled/format.h	/^    const ArgList &args() const$/;"	f	class:fmt::internal::FormatterBase
args_	libs/spdlog/fmt/bundled/format.h	/^        const internal::Arg *args_;$/;"	m	union:fmt::ArgList::__anon30
args_	libs/spdlog/fmt/bundled/format.h	/^    ArgList args_;$/;"	m	class:fmt::internal::FormatterBase
arrIndex	DataStructs.h	/^inline long int arrIndex(const int i, const int spin) {return spin+i*_CONFIG_spins;}$/;"	f
asyncLogQueue	easylogging++.h	/^            inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
async_log_helper	libs/spdlog/details/async_log_helper.h	/^class async_log_helper$/;"	c	namespace:spdlog::details
async_log_helper	libs/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::async_log_helper($/;"	f	class:spdlog::details::async_log_helper
async_logger	libs/spdlog/async_logger.h	/^class async_logger :public logger$/;"	c	namespace:spdlog
async_logger	libs/spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string& logger_name,$/;"	f	class:spdlog::async_logger
async_msg	libs/spdlog/details/async_log_helper.h	/^        async_msg(async_msg_type m_type) :msg_type(m_type)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	libs/spdlog/details/async_log_helper.h	/^        async_msg(const details::log_msg& m) :$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	libs/spdlog/details/async_log_helper.h	/^    struct async_msg$/;"	s	class:spdlog::details::async_log_helper
async_msg_type	libs/spdlog/details/async_log_helper.h	/^    enum class async_msg_type$/;"	c	class:spdlog::details::async_log_helper
async_overflow_policy	libs/spdlog/common.h	/^enum class async_overflow_policy$/;"	c	namespace:spdlog
b_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class b_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
base	easylogging++.h	/^                namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag
base	easylogging++.h	/^    namespace base {$/;"	n	namespace:el
base	easylogging++.h	/^    namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base
base	easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
base_sink	libs/spdlog/sinks/base_sink.h	/^    base_sink():_mutex() {}$/;"	f	class:spdlog::sinks::base_sink
base_sink	libs/spdlog/sinks/base_sink.h	/^class base_sink:public sink$/;"	c	namespace:spdlog::sinks
basic_logger_mt	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_mt(const std::string& logger_name, const filename_t& filename, bool truncate)$/;"	f	class:spdlog
basic_logger_st	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_st(const std::string& logger_name, const filename_t& filename, bool truncate)$/;"	f	class:spdlog
beta	GreensFct.hpp	/^		RealT beta;$/;"	m	class:GreensFunction
beta	WeakCoupling.hpp	/^		const RealT beta;$/;"	m	class:WeakCoupling
bitwise	easylogging++.h	/^                                namespace bitwise {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
blink	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string blink      = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink
block_retry	libs/spdlog/common.h	/^    block_retry, \/\/ Block \/ yield \/ sleep until message can be enqueued$/;"	m	class:spdlog::async_overflow_policy
blue	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string blue       = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bold	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string bold       = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
brief	easylogging++.h	/^                            const char* brief;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon37
buffer_	libs/spdlog/details/mpmc_bounded_q.h	/^    cell_t* const           buffer_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
buffer_	libs/spdlog/fmt/bundled/format.h	/^        : BasicWriter<Char>(buffer_), buffer_(array, SIZE) {}$/;"	f	class:BasicArrayWriter
buffer_	libs/spdlog/fmt/bundled/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:BasicWriter
buffer_	libs/spdlog/fmt/bundled/format.h	/^    MemoryBuffer<char, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF16ToUTF8
buffer_	libs/spdlog/fmt/bundled/format.h	/^    MemoryBuffer<wchar_t, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF8ToUTF16
buffer_	libs/spdlog/fmt/bundled/format.h	/^    internal::FixedBuffer<Char> buffer_;$/;"	m	class:BasicArrayWriter
buffer_	libs/spdlog/fmt/bundled/format.h	/^    internal::MemoryBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> buffer_;$/;"	m	class:BasicMemoryWriter
buffer_	libs/spdlog/fmt/bundled/format.h	/^    mutable char buffer_[BUFFER_SIZE];$/;"	m	class:FormatInt
buffer_	libs/spdlog/fmt/bundled/ostream.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::internal::FormatBuf
buffer_mask_	libs/spdlog/details/mpmc_bounded_q.h	/^    size_t const            buffer_mask_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
build	easylogging++.h	/^        void build(Configurations* configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
burninSteps	StrongCoupling.h	/^                const unsigned int burninSteps;$/;"	m	class:StrongCoupling
burninSteps	WeakCoupling.hpp	/^		const unsigned int burninSteps;$/;"	m	class:WeakCoupling
c_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class c_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
c_str	libs/spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:BasicWriter
c_str	libs/spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicCStringRef
c_str	libs/spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:FormatInt
c_str	libs/spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
c_str	libs/spdlog/fmt/bundled/format.h	/^    const wchar_t *c_str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
cache_refresh	libs/spdlog/details/pattern_formatter_impl.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::z_formatter
cacheline_pad_t	libs/spdlog/details/mpmc_bounded_q.h	/^    typedef char            cacheline_pad_t [cacheline_size];$/;"	t	class:spdlog::details::mpmc_bounded_queue
cacheline_size	libs/spdlog/details/mpmc_bounded_q.h	/^    static size_t const     cacheline_size = 64;$/;"	m	class:spdlog::details::mpmc_bounded_queue
calc_filename	libs/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename, const filename_t& extension)$/;"	f	struct:spdlog::sinks::dateonly_daily_file_name_calculator
calc_filename	libs/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename, const filename_t& extension)$/;"	f	struct:spdlog::sinks::default_daily_file_name_calculator
calc_filename	libs/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& filename, std::size_t index, const filename_t& extension)$/;"	f	class:spdlog::sinks::rotating_file_sink
capacity	libs/spdlog/fmt/bundled/format.h	/^    std::size_t capacity() const$/;"	f	class:fmt::Buffer
capacity_	libs/spdlog/fmt/bundled/format.h	/^    std::size_t capacity_;$/;"	m	class:fmt::Buffer
cast	libs/spdlog/fmt/bundled/format.h	/^    static Char cast(int value)$/;"	f	class:fmt::internal::BasicCharTraits
castFromInt	easylogging++.h	/^                static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
castFromInt	easylogging++.h	/^            static Level castFromInt(base::type::EnumType l) {$/;"	f	class:el::Level::LevelHelper
castToInt	easylogging++.h	/^                static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
castToInt	easylogging++.h	/^            static base::type::EnumType castToInt(Level level) {$/;"	f	class:el::Level::LevelHelper
cell_t	libs/spdlog/details/mpmc_bounded_q.h	/^    struct cell_t$/;"	s	class:spdlog::details::mpmc_bounded_queue
ch_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^    explicit ch_formatter(char ch): _ch(ch)$/;"	f	class:spdlog::details::ch_formatter
ch_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class ch_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
charPtrVal	easylogging++.h	/^                                static inline const char* charPtrVal(const char* pointer) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
char_t	easylogging++.h	/^            typedef wchar_t char_t;$/;"	t	namespace:el::base::type
check_no_auto_index	libs/spdlog/fmt/bundled/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
clear	easylogging++.h	/^    inline void clear(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
clearModules	easylogging++.h	/^            inline void clearModules(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
close	libs/spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper
clz	libs/spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x)$/;"	f	namespace:fmt::internal
clzll	libs/spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x)$/;"	f	namespace:fmt::internal
colors_	libs/spdlog/sinks/ansicolor_sink.h	/^    std::map<level::level_enum, std::string> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
commandLineArgs	easylogging++.h	/^            inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
compare	StrongCoupling.h	/^	struct compare {$/;"	s	class:StrongCoupling
compare	WeakCoupling.hpp	/^		struct compare {$/;"	s	class:WeakCoupling
compare	libs/spdlog/fmt/bundled/format.h	/^    int compare(BasicStringRef other) const$/;"	f	class:fmt::BasicStringRef
compile_pattern	libs/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::compile_pattern(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
concealed	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed  = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink
configurationFile	easylogging++.h	/^    inline const std::string& configurationFile(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
configurationType	easylogging++.h	/^    inline ConfigurationType configurationType(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
configurations	easylogging++.h	/^        const Configurations* configurations(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
configurations	easylogging++.h	/^        inline Configurations* configurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
configure	easylogging++.h	/^        void configure(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
confs	StrongCoupling.h	/^                SConfigL& confs;$/;"	m	class:StrongCoupling
confs	WeakCoupling.hpp	/^		SConfigL confs;$/;"	m	class:WeakCoupling
const_check	libs/spdlog/fmt/bundled/format.h	/^inline T const_check(T value)$/;"	f	namespace:fmt::internal
const_iterator	easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
const_iterator	easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
consts	easylogging++.h	/^                    namespace consts {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base
convert	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC int internal::UTF16ToUTF8::convert(WStringRef s) {$/;"	f	class:fmt::internal::UTF16ToUTF8
convert	libs/spdlog/fmt/bundled/format.h	/^    static char convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	libs/spdlog/fmt/bundled/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	libs/spdlog/fmt/bundled/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fmt::internal::CharTraits
convertFromString	easylogging++.h	/^                static ConfigurationType convertFromString(const char* configStr) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
convertFromString	easylogging++.h	/^            static Level convertFromString(const char* levelStr) {$/;"	f	class:el::Level::LevelHelper
convertToColoredOutput	easylogging++.h	/^        void convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogBuilder
convertToString	easylogging++.h	/^                static const char* convertToString(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
convertToString	easylogging++.h	/^            static const char* convertToString(Level level) {$/;"	f	class:el::Level::LevelHelper
convert_to_android	libs/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::android_sink
count_digits	libs/spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fmt::internal
create	libs/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog::details::registry_t
create	libs/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sink_ptr sink)$/;"	f	class:spdlog::details::registry_t
create	libs/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sinks_init_list sinks)$/;"	f	class:spdlog::details::registry_t
create	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, Args... args)$/;"	f	class:spdlog
create	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog
create	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const spdlog::sink_ptr& sink)$/;"	f	class:spdlog
create	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, spdlog::sinks_init_list sinks)$/;"	f	class:spdlog
createPath	easylogging++.h	/^                                    static bool createPath(const std::string& path) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
create_console_logger	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> create_console_logger(const std::string& logger_name, spdlog::sink_ptr sink, bool color)$/;"	f
critical	libs/spdlog/common.h	/^    critical = 5,$/;"	e	enum:spdlog::level::__anon2
critical	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const T& msg)$/;"	f	class:spdlog::logger
critical	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
custom	libs/spdlog/fmt/bundled/format.h	/^        CustomValue custom;$/;"	m	union:fmt::internal::Value::__anon21
customFormatSpecifiers	easylogging++.h	/^            const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
cyan	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan       = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink
d_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class d_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
daily_file_sink	libs/spdlog/sinks/file_sinks.h	/^    daily_file_sink($/;"	f	class:spdlog::sinks::daily_file_sink
daily_file_sink	libs/spdlog/sinks/file_sinks.h	/^class daily_file_sink :public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
daily_file_sink_mt	libs/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<std::mutex> daily_file_sink_mt;$/;"	t	namespace:spdlog::sinks
daily_file_sink_st	libs/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<details::null_mutex> daily_file_sink_st;$/;"	t	namespace:spdlog::sinks
daily_logger_mt	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_mt(const std::string& logger_name, const filename_t& filename, int hour, int minute)$/;"	f	class:spdlog
daily_logger_st	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_st(const std::string& logger_name, const filename_t& filename, int hour, int minute)$/;"	f	class:spdlog
dark	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string dark       = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink
data	easylogging++.h	/^            inline LogDispatchData* data(void) { return &m_dispatchData; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
data	libs/spdlog/fmt/bundled/format.h	/^    const Char *data() const$/;"	f	class:fmt::BasicStringRef
data	libs/spdlog/fmt/bundled/format.h	/^    const char *data() const$/;"	f	class:FormatInt
data	libs/spdlog/fmt/bundled/format.h	/^    int data[2];$/;"	m	struct:fmt::internal::DummyInt
data_	libs/spdlog/details/mpmc_bounded_q.h	/^        T                     data_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
data_	libs/spdlog/fmt/bundled/format.h	/^    T data_[SIZE];$/;"	m	class:fmt::internal::MemoryBuffer
data_	libs/spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicCStringRef
data_	libs/spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicStringRef
dateTimeFormat	easylogging++.h	/^        inline const std::string& dateTimeFormat(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
dateonly_daily_file_name_calculator	libs/spdlog/sinks/file_sinks.h	/^struct dateonly_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
deallocate	libs/spdlog/fmt/bundled/format.h	/^    void deallocate()$/;"	f	class:fmt::internal::MemoryBuffer
debug	libs/spdlog/common.h	/^    debug = 1,$/;"	e	enum:spdlog::level::__anon2
debug	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const T& msg)$/;"	f	class:spdlog::logger
debug	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
deepCopy	easylogging++.h	/^virtual inline void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
defaultConfigurations	easylogging++.h	/^            inline Configurations* defaultConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
defaultPreRollOutCallback	easylogging++.h	/^                    static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base
default_daily_file_name_calculator	libs/spdlog/sinks/file_sinks.h	/^struct default_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
deleteConfig	StrongCoupling.h	/^        inline static void deleteConfig(SConfigL& l, const int pos){$/;"	f	class:StrongCoupling
deleteConfig	WeakCoupling.hpp	/^			inline static void deleteConfig(SConfigL& l, const int pos){$/;"	f	class:WeakCoupling
dequeue	libs/spdlog/details/mpmc_bounded_q.h	/^    bool dequeue(T& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
dequeue_pos_	libs/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     dequeue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
detail	easylogging++.h	/^                            const char* detail;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon37
details	libs/spdlog/async_logger.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/common.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/async_log_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/file_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/log_msg.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/mpmc_bounded_q.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/null_mutex.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/os.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/pattern_formatter_impl.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/details/registry.h	/^namespace details$/;"	n	namespace:spdlog
details	libs/spdlog/formatter.h	/^namespace details$/;"	n	namespace:spdlog
digit_index_	libs/spdlog/fmt/bundled/format.h	/^    unsigned digit_index_;$/;"	m	class:fmt::internal::ThousandsSep
dispatchAction	easylogging++.h	/^        inline base::DispatchAction dispatchAction(void) const { return m_dispatchAction; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
dist_sink	libs/spdlog/sinks/dist_sink.h	/^    explicit dist_sink() :_sinks() {}$/;"	f	class:spdlog::sinks::dist_sink
dist_sink	libs/spdlog/sinks/dist_sink.h	/^class dist_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dist_sink_mt	libs/spdlog/sinks/dist_sink.h	/^typedef dist_sink<std::mutex> dist_sink_mt;$/;"	t	namespace:spdlog::sinks
dist_sink_st	libs/spdlog/sinks/dist_sink.h	/^typedef dist_sink<details::null_mutex> dist_sink_st;$/;"	t	namespace:spdlog::sinks
dm	Session.vim	/^nnoremap <silent> dm :call signature#utils#Remove(v:count)$/;"	m
doMeasurement	StrongCoupling.cpp	/^void StrongCoupling::doMeasurement(void)$/;"	f	class:StrongCoupling
do_get_arg	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC Arg internal::FormatterBase::do_get_arg($/;"	f	class:fmt::internal::FormatterBase
double_value	libs/spdlog/fmt/bundled/format.h	/^        double double_value;$/;"	m	union:fmt::internal::Value::__anon21
drawGt	main.cpp	/^int drawGt(mglGraph *gr){$/;"	f
drawGw	main.cpp	/^int drawGw(mglGraph *gr){$/;"	f
drawResults	main.cpp	/^int drawResults(mglGraph *gr){$/;"	f
drop	libs/spdlog/details/registry.h	/^    void drop(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
drop	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop(const std::string &name)$/;"	f	class:spdlog
drop_all	libs/spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry_t
drop_all	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop_all()$/;"	f	class:spdlog
e_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class e_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
el	easylogging++.h	/^namespace el {$/;"	n
el_getVALength	easylogging++.h	5252;"	d
el_resolveVALength	easylogging++.h	5261;"	d
empty	easylogging++.h	/^            inline bool empty(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
enable_conversion	libs/spdlog/fmt/bundled/format.h	/^    enum { enable_conversion = sizeof(convert(get<T>())) == sizeof(Yes) };$/;"	e	enum:fmt::internal::ConvertToInt::__anon25
enabled	easylogging++.h	/^        inline bool enabled(Level level) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
enabled	easylogging++.h	/^        inline bool enabled(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
enabled	easylogging++.h	/^        inline bool enabled(void) const { return m_enabled; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Callback
enqueue	libs/spdlog/details/mpmc_bounded_q.h	/^    bool enqueue(T&& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
enqueue_pos_	libs/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     enqueue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
eol	libs/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char* eol = SPDLOG_EOL;$/;"	m	namespace:spdlog::details::os
eol_size	libs/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static int eol_size = sizeof(SPDLOG_EOL) - 1;$/;"	m	namespace:spdlog::details::os
err	libs/spdlog/common.h	/^    err = 4,$/;"	e	enum:spdlog::level::__anon2
errno_str	libs/spdlog/details/os.h	/^inline std::string errno_str(int err_num)$/;"	f	namespace:spdlog::details::os
error	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const T& msg)$/;"	f	class:spdlog::logger
error	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
error_code	libs/spdlog/fmt/bundled/format.h	/^    int error_code() const$/;"	f	class:SystemError
error_code_	libs/spdlog/fmt/bundled/format.h	/^    int error_code_;$/;"	m	class:SystemError
error_handler	libs/spdlog/details/logger_impl.h	/^inline spdlog::log_err_handler spdlog::logger::error_handler()$/;"	f	class:spdlog::logger
f_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class f_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
fftw3_input	GreensFct.hpp	/^		fftw_complex fftw3_input[MAX_M_FREQ];$/;"	m	class:GreensFunction
fftw3_output	GreensFct.hpp	/^		fftw_complex fftw3_output[MAX_M_FREQ];$/;"	m	class:GreensFunction
file	easylogging++.h	/^        inline const std::string& file(void) const { return m_file; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
fileStream	easylogging++.h	/^        inline base::type::fstream_t* fileStream(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
file_exists	libs/spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t& name)$/;"	f	class:spdlog::details::file_helper
file_exists	libs/spdlog/details/os.h	/^inline bool file_exists(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
file_helper	libs/spdlog/details/file_helper.h	/^    explicit file_helper() :$/;"	f	class:spdlog::details::file_helper
file_helper	libs/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
filename	easylogging++.h	/^        inline const char* filename(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
filename	easylogging++.h	/^        inline const std::string& filename(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
filename	libs/spdlog/details/file_helper.h	/^    const filename_t& filename() const$/;"	f	class:spdlog::details::file_helper
filename_to_str	libs/spdlog/details/os.h	/^inline std::string filename_to_str(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
filesize	libs/spdlog/details/os.h	/^inline size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os
fill	libs/spdlog/fmt/bundled/format.h	/^    char fill() const$/;"	f	struct:fmt::TypeSpec
fill	libs/spdlog/fmt/bundled/format.h	/^    wchar_t fill() const$/;"	f	struct:fmt::WidthSpec
fill_	libs/spdlog/fmt/bundled/format.h	/^    wchar_t fill_;$/;"	m	struct:fmt::WidthSpec
fill_log_msg	libs/spdlog/details/async_log_helper.h	/^        void fill_log_msg(log_msg &msg)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
fill_padding	libs/spdlog/fmt/bundled/format.h	/^BasicWriter<Char>::fill_padding($/;"	f	class:BasicWriter
find	libs/spdlog/fmt/bundled/format.h	/^    const internal::Arg* find(const fmt::BasicStringRef<Char> &name) const$/;"	f	class:fmt::internal::ArgMap
fits_in_int	libs/spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(T value)$/;"	f	struct:fmt::internal::IntChecker
fits_in_int	libs/spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(bool)$/;"	f	struct:fmt::internal::IntChecker
fits_in_int	libs/spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(int)$/;"	f	struct:fmt::internal::IntChecker
flag	libs/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fmt::FormatSpec
flag	libs/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::AlignTypeSpec
flag	libs/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::TypeSpec
flag_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flags	easylogging++.h	/^            inline base::type::EnumType flags(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
flags	easylogging++.h	/^        inline base::type::EnumType flags(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
flags_	libs/spdlog/fmt/bundled/format.h	/^    unsigned flags_;$/;"	m	struct:fmt::FormatSpec
flush	easylogging++.h	/^        inline void flush(Level level, base::type::fstream_t* fs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
flush	easylogging++.h	/^        inline void flush(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
flush	libs/spdlog/details/async_log_helper.h	/^        flush,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
flush	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::flush(bool wait_for_q)$/;"	f	class:spdlog::details::async_log_helper
flush	libs/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush()$/;"	f	class:spdlog::async_logger
flush	libs/spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper
flush	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger
flush	libs/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::flush()$/;"	f	class:spdlog::sinks::ansicolor_sink
flushAll	easylogging++.h	/^            inline void flushAll(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
flush_on	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger
fmt	libs/spdlog/fmt/bundled/format.cc	/^namespace fmt {$/;"	n	file:
fmt	libs/spdlog/fmt/bundled/format.h	/^namespace fmt$/;"	n
fmt	libs/spdlog/fmt/bundled/ostream.cc	/^namespace fmt {$/;"	n	file:
fmt	libs/spdlog/fmt/bundled/ostream.h	/^namespace fmt$/;"	n
fmt	libs/spdlog/fmt/bundled/printf.h	/^namespace fmt$/;"	n
fopen_s	libs/spdlog/details/os.h	/^inline int fopen_s(FILE** fp, const filename_t& filename, const filename_t& mode)$/;"	f	namespace:spdlog::details::os
forEachConfigType	easylogging++.h	/^                static inline void forEachConfigType(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
forEachLevel	easylogging++.h	/^            static inline void forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::Level::LevelHelper
format	easylogging++.h	/^        inline const base::type::string_t& format(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
format	libs/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::format(details::log_msg& msg)$/;"	f	class:spdlog::pattern_formatter
format	libs/spdlog/fmt/bundled/format.h	/^        FormatFunc format;$/;"	m	struct:fmt::internal::Value::CustomValue
format	libs/spdlog/fmt/bundled/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f
format	libs/spdlog/fmt/bundled/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f
format	libs/spdlog/fmt/bundled/printf.h	/^void PrintfFormatter<Char, AF>::format(BasicCStringRef<Char> format_str)$/;"	f	class:fmt::PrintfFormatter
formatSpecifier	easylogging++.h	/^    inline const char* formatSpecifier(void) const { return m_formatSpecifier; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::CustomFormatSpecifier
format_	libs/spdlog/fmt/bundled/format.h	/^    const Char *format_;$/;"	m	class:fmt::BasicArgFormatter
format_arg	libs/spdlog/fmt/bundled/format.h	/^void format_arg(Formatter &, const Char *, const T &)$/;"	f	namespace:fmt::internal
format_arg	libs/spdlog/fmt/bundled/ostream.h	/^void format_arg(BasicFormatter<Char, ArgFormatter> &f,$/;"	f	namespace:fmt
format_custom_arg	libs/spdlog/fmt/bundled/format.h	/^    static void format_custom_arg($/;"	f	class:fmt::internal::MakeValue
format_decimal	libs/spdlog/fmt/bundled/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:FormatInt
format_decimal	libs/spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fmt::internal
format_decimal	libs/spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits,$/;"	f	namespace:fmt::internal
format_decimal	libs/spdlog/fmt/bundled/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f
format_float	libs/spdlog/fmt/bundled/format.cc	/^int internal::CharTraits<char>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	libs/spdlog/fmt/bundled/format.cc	/^int internal::CharTraits<wchar_t>::format_float($/;"	f	class:fmt::internal::CharTraits
formatted	libs/spdlog/details/log_msg.h	/^    fmt::MemoryWriter formatted;$/;"	m	struct:spdlog::details::log_msg
formatter	libs/spdlog/details/registry.h	/^    void formatter(formatter_ptr f)$/;"	f	class:spdlog::details::registry_t
formatter	libs/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter_	libs/spdlog/fmt/bundled/format.h	/^    BasicFormatter<Char, Impl> &formatter_;$/;"	m	class:fmt::BasicArgFormatter
fprintf	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC int fprintf(std::FILE *f, CStringRef format, ArgList args) {$/;"	f	namespace:fmt
fprintf	libs/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::ostream &os, CStringRef format_str, ArgList args)$/;"	f	namespace:fmt
front	easylogging++.h	/^            inline AsyncLogItem front(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
fstream_t	easylogging++.h	/^            typedef std::wfstream fstream_t;$/;"	t	namespace:el::base::type
full_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class full_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
func	easylogging++.h	/^        inline const std::string& func(void) const { return m_func; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
g0	WeakCoupling.hpp	/^		GreensFct &g0;$/;"	m	class:WeakCoupling
gImp_wn	WeakCoupling.hpp	/^		MatG    gImp_wn;$/;"	m	class:WeakCoupling
g_it	GreensFct.hpp	/^		Eigen::Array<RealT,MAX_T_BINS,SPINS>	g_it; \/\/ col major -> spin outer loop$/;"	m	class:GreensFunction
g_wn	GreensFct.hpp	/^		Eigen::Array<ComplexT,MAX_M_FREQ,SPINS>	g_wn; \/\/ col major -> spin outer loop$/;"	m	class:GreensFunction
get	easylogging++.h	/^            Logger* get(const std::string& id, bool forceCreation = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
get	easylogging++.h	/^    inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
get	easylogging++.h	/^inline T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
get	easylogging++.h	/^inline T_Ptr* get(const T_Key& uniqKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
get	libs/spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
get	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::get(const std::string& name)$/;"	f	class:spdlog
get	libs/spdlog/fmt/bundled/format.h	/^    static Char *get(Char *p)$/;"	f	class:BasicWriter
get	libs/spdlog/fmt/bundled/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:BasicWriter
getByMFreq	GreensFct.hpp	/^		inline ComplexT getByMFreq(const int n, const unsigned int spin) const		{ return g_wn(n,spin); }$/;"	f	class:GreensFunction
getConfigByRef	easylogging++.h	/^        inline Conf_T& getConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
getConfigByVal	easylogging++.h	/^        inline Conf_T getConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
getCounter	easylogging++.h	/^        inline const base::HitCounter* getCounter(const char* filename, unsigned long int lineNumber) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::RegisteredHitCounters
getCurrentThreadId	easylogging++.h	/^                                static inline std::string getCurrentThreadId(void) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
getGreensFct	WeakCoupling.cpp	/^ImTG WeakCoupling::getGreensFct(void)$/;"	f	class:WeakCoupling
getGreensFct	WeakCoupling.hpp	/^		inline RealT getGreensFct(const RealT tp, const int spin)$/;"	f	class:WeakCoupling
getM	WeakCoupling.hpp	/^		MatrixT* getM(void)	{return Ms;}$/;"	f	class:WeakCoupling
getMatsGreensFct	WeakCoupling.cpp	/^MatG WeakCoupling::getMatsGreensFct(void)$/;"	f	class:WeakCoupling
getSizeOfFile	easylogging++.h	/^                                    static std::size_t getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
getTByInd	GreensFct.hpp	/^		inline std::pair<RealT,RealT> getTByInd(const int i, const int spin) const {$/;"	f	class:GreensFunction
getULong	easylogging++.h	/^        unsigned long getULong(std::string confVal) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
get_allocator	libs/spdlog/fmt/bundled/format.h	/^    Allocator get_allocator() const$/;"	f	class:fmt::internal::MemoryBuffer
get_arg	libs/spdlog/fmt/bundled/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fmt::internal::FormatterBase
get_arg	libs/spdlog/fmt/bundled/printf.h	/^internal::Arg PrintfFormatter<Char, AF>::get_arg(const Char *s,$/;"	f	class:fmt::PrintfFormatter
get_cached_offset	libs/spdlog/details/pattern_formatter_impl.h	/^    int get_cached_offset(const log_msg& msg, const std::tm& tm_time)$/;"	f	class:spdlog::details::z_formatter
gmtime	libs/spdlog/details/os.h	/^inline std::tm gmtime()$/;"	f	namespace:spdlog::details::os
gmtime	libs/spdlog/details/os.h	/^inline std::tm gmtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
green	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string green      = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink
grey	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string grey       = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink
grow	libs/spdlog/fmt/bundled/format.cc	/^void internal::FixedBuffer<Char>::grow(std::size_t) {$/;"	f	class:fmt::internal::FixedBuffer
grow	libs/spdlog/fmt/bundled/format.h	/^void MemoryBuffer<T, SIZE, Allocator>::grow(std::size_t size)$/;"	f	class:fmt::internal::MemoryBuffer
grow_buffer	libs/spdlog/fmt/bundled/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:BasicWriter
guessInitial	GreensFct.cpp	/^void GreensFct::guessInitial(void){$/;"	f	class:GreensFct
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	Session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
handle_flag	libs/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::handle_flag(char flag)$/;"	f	class:spdlog::pattern_formatter
handle_flush_interval	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::handle_flush_interval(log_clock::time_point& now, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
has	easylogging++.h	/^            inline bool has(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
hasConfiguration	easylogging++.h	/^    bool hasConfiguration(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
hasConfiguration	easylogging++.h	/^    inline bool hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
hasCustomFormatSpecifier	easylogging++.h	/^            inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
hasFlag	easylogging++.h	/^                                static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
hasFlag	easylogging++.h	/^            inline bool hasFlag(LoggingFlag flag) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
hasFlag	easylogging++.h	/^        inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
help	test.cp	/^static char help[]="Finds the nonlinear least-squares solution to the model \\n\\$/;"	v	file:
help	test_SLEPc.cpp	/^static char help[] = "Standard symmetric eigenproblem corresponding to the Laplacian operator in 1 dimension.\\n\\n"$/;"	v	file:
hitCounters	easylogging++.h	/^            inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
hitCounts	easylogging++.h	/^        inline std::size_t hitCounts(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
hybr	StrongCoupling.h	/^                MatrixT& hybr;$/;"	m	class:StrongCoupling
ic	Session.vim	/^omap ic <Plug>GitGutterTextObjectInnerPending$/;"	m
id	easylogging++.h	/^        inline const std::string& id(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
idm	test.cp	/^  PetscInt idm[NOBSERVATIONS];  \/* Matrix indices for jacobian *\/$/;"	m	struct:__anon1	file:
idn	test.cp	/^  PetscInt idn[NPARAMETERS];$/;"	m	struct:__anon1	file:
ignoreComments	easylogging++.h	/^        static void ignoreComments(std::string* line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
increment	easylogging++.h	/^        inline void increment(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
info	libs/spdlog/common.h	/^    info = 2,$/;"	e	enum:spdlog::level::__anon2
info	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const T& msg)$/;"	f	class:spdlog::logger
info	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
init	easylogging++.h	/^                                void init(int width) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
init	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void SystemError::init($/;"	f	class:fmt::SystemError
init	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void WindowsError::init($/;"	f	class:fmt::WindowsError
init	libs/spdlog/fmt/bundled/format.cc	/^void internal::ArgMap<Char>::init(const ArgList &args) {$/;"	f	class:fmt::internal::ArgMap
initUnflushedCount	easylogging++.h	/^        void initUnflushedCount(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
insertFile	easylogging++.h	/^        void insertFile(Level level, const std::string& fullFilename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
installCustomFormatSpecifier	easylogging++.h	/^            inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
installLogDispatchCallback	easylogging++.h	/^            inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
installPerformanceTrackingCallback	easylogging++.h	/^            inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
instance	libs/spdlog/details/registry.h	/^    static registry_t<Mutex>& instance()$/;"	f	class:spdlog::details::registry_t
instance	libs/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::stderr_sink
instance	libs/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::stdout_sink
int_type	libs/spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fmt::internal::FormatBuf
int_value	libs/spdlog/fmt/bundled/format.h	/^        int int_value;$/;"	m	union:fmt::internal::Value::__anon21
internal	easylogging++.h	/^                                namespace internal {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
internal	libs/spdlog/fmt/bundled/format.cc	/^namespace internal {$/;"	n	namespace:fmt	file:
internal	libs/spdlog/fmt/bundled/format.h	/^namespace internal$/;"	n	namespace:fmt
internal	libs/spdlog/fmt/bundled/ostream.cc	/^namespace internal {$/;"	n	namespace:fmt	file:
internal	libs/spdlog/fmt/bundled/ostream.h	/^namespace internal$/;"	n	namespace:fmt
internal	libs/spdlog/fmt/bundled/printf.h	/^namespace internal$/;"	n	namespace:fmt
intmax_t	libs/spdlog/fmt/bundled/format.h	/^typedef __int64          intmax_t;$/;"	t
isComment	easylogging++.h	/^        static inline bool isComment(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
isConfig	easylogging++.h	/^        static inline bool isConfig(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
isFlushNeeded	easylogging++.h	/^        inline bool isFlushNeeded(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
isLevel	easylogging++.h	/^        static inline bool isLevel(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
isValidId	easylogging++.h	/^        static inline bool isValidId(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
is_negative	libs/spdlog/fmt/bundled/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fmt::internal::SignChecker
is_negative	libs/spdlog/fmt/bundled/format.h	/^    static bool is_negative(T)$/;"	f	struct:fmt::internal::SignChecker
is_negative	libs/spdlog/fmt/bundled/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fmt::internal
is_same	libs/spdlog/fmt/bundled/printf.h	/^struct is_same$/;"	s	namespace:fmt::internal
is_same	libs/spdlog/fmt/bundled/printf.h	/^struct is_same<T, T>$/;"	s	namespace:fmt::internal
isinf	libs/spdlog/fmt/bundled/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fmt::internal
isinfinity	libs/spdlog/fmt/bundled/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits
isnan	libs/spdlog/fmt/bundled/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fmt::internal
isnegative	libs/spdlog/fmt/bundled/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits
isnotanumber	libs/spdlog/fmt/bundled/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits
iterator	easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
iterator	easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
j	test.cp	/^  PetscReal j[NOBSERVATIONS][NPARAMETERS]; \/* dense jacobian matrix array*\/$/;"	m	struct:__anon1	file:
kAm	easylogging++.h	/^                        static const char* kAm                              =      "AM";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kAppNameFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationComment	easylogging++.h	/^                        static const char* kConfigurationComment                   =      "##";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationLevel	easylogging++.h	/^                        static const char* kConfigurationLevel                     =      "*";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationLoggerId	easylogging++.h	/^                        static const char* kConfigurationLoggerId                  =      "--";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCrashSignals	easylogging++.h	/^                        } kCrashSignals[] = {$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts	typeref:struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon37
kCrashSignalsCount	easylogging++.h	/^                        static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ sizeof(kCrashSignals[0]);$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCurrentHostFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCurrentUserFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDateTimeFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDateTimeFormatSpecifierForFilename	easylogging++.h	/^                        static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDays	easylogging++.h	/^                        static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDaysAbbrev	easylogging++.h	/^                        static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDebugLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDebugLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultDateTimeFormat	easylogging++.h	/^                        static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultDateTimeFormatInFilename	easylogging++.h	/^                        static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	easylogging++.h	/^                        static const char* kDefaultLogFile                         =      "logs\/myeasylog.log";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	easylogging++.h	/^                        static const char* kDefaultLogFile                         =      "logs\\\\myeasylog.log";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	easylogging++.h	/^                        static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFileParam	easylogging++.h	/^                        static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLoggerId	easylogging++.h	/^                        static const char* kDefaultLoggerId                        =      "default";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultMillisecondsWidth	easylogging++.h	/^                        static const unsigned int  kDefaultMillisecondsWidth       =      3;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kErrorLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kErrorLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFatalLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFatalLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFilePathSeperator	easylogging++.h	/^                        static const char* kFilePathSeperator                      =      "\/";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFilePathSeperator	easylogging++.h	/^                        static const char* kFilePathSeperator                      =      "\\\\";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFormatSpecifierChar	easylogging++.h	/^                        static const char  kFormatSpecifierChar                    =      '%';$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFormatSpecifierCharValue	easylogging++.h	/^                        static const char  kFormatSpecifierCharValue               =      'v';$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kInfoLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO ");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kInfoLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFileBaseFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbase");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFileFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFunctionFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogLineFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogLocationFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLoggerIdFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLoggingFlagsParam	easylogging++.h	/^                        static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxLogPerContainer	easylogging++.h	/^                        static const unsigned int kMaxLogPerContainer              =      100;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxLogPerCounter	easylogging++.h	/^                        static const unsigned int kMaxLogPerCounter                =      100000;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxValid	easylogging++.h	/^                static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationType::MaxLogFileSize);$/;"	m	class:el::Level::ConfigurationType::ConfigurationTypeHelper
kMaxValid	easylogging++.h	/^            static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	class:el::Level::LevelHelper
kMaxVerboseLevel	easylogging++.h	/^                        static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMessageFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMinValid	easylogging++.h	/^                static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationType::Enabled);$/;"	m	class:el::Level::ConfigurationType::ConfigurationTypeHelper
kMinValid	easylogging++.h	/^            static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	class:el::Level::LevelHelper
kMonths	easylogging++.h	/^                        static const char* kMonths[12]                      =      { "January", "February", "March", "Apri", "May", "June", "July", "August",$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMonthsAbbrev	easylogging++.h	/^                        static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kNullPointer	easylogging++.h	/^                        static const char* kNullPointer                            =      "nullptr";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPerformanceLoggerId	easylogging++.h	/^                        static const char* kPerformanceLoggerId                    =      "performance";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPerformanceTrackerDefaultLevel	easylogging++.h	/^                        static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPm	easylogging++.h	/^                        static const char* kPm                              =      "PM";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSeverityLevelFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSeverityLevelShortFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("%levshort");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSourceFilenameMaxLength	easylogging++.h	/^                        static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSourceLineMaxLength	easylogging++.h	/^                        static const std::size_t kSourceLineMaxLength              =      10;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSysLogLoggerId	easylogging++.h	/^                        static const char* kSysLogLoggerId                         =      "syslog";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kThreadIdFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTimeFormats	easylogging++.h	/^                        } kTimeFormats[] = {$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts	typeref:struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon36
kTimeFormatsCount	easylogging++.h	/^                        static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ sizeof(kTimeFormats[0]);$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTraceLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTraceLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kUnknownHost	easylogging++.h	/^                        static const char* kUnknownHost                            =      "unknown-host";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kUnknownUser	easylogging++.h	/^                        static const char* kUnknownUser                            =      "user";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kValidLoggerIdSymbols	easylogging++.h	/^                        static const char* kValidLoggerIdSymbols                   =      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelFormatSpecifier	easylogging++.h	/^                        static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kVerboseLevelLogValue  =   ELPP_LITERAL("VER");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kWarningLevelLogValue	easylogging++.h	/^                        static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARN ");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kWarningLevelShortLogValue	easylogging++.h	/^                        static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kYearBase	easylogging++.h	/^                        static const int kYearBase                          =      1900;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
level	easylogging++.h	/^            inline base::type::VerboseLevel level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
level	easylogging++.h	/^        inline Level level(void) const { return m_level; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
level	easylogging++.h	/^        inline Level level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
level	easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
level	libs/spdlog/common.h	/^namespace level$/;"	n	namespace:spdlog
level	libs/spdlog/details/async_log_helper.h	/^        level::level_enum level;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
level	libs/spdlog/details/log_msg.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::log_msg
level	libs/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger
level	libs/spdlog/sinks/sink.h	/^inline level::level_enum sink::level() const$/;"	f	class:spdlog::sinks::sink
level_enum	libs/spdlog/common.h	/^} level_enum;$/;"	t	namespace:spdlog::level	typeref:enum:spdlog::level::__anon2
level_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class level_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
line	easylogging++.h	/^        inline unsigned long int line(void) const { return m_line; } \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
lineNumber	easylogging++.h	/^        inline unsigned long int lineNumber(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
load	libs/spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int
localtime	libs/spdlog/details/os.h	/^inline std::tm localtime()$/;"	f	namespace:spdlog::details::os
localtime	libs/spdlog/details/os.h	/^inline std::tm localtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
lock	easylogging++.h	/^                                        inline void lock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
lock	libs/spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex
log	easylogging++.h	/^        virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
log	easylogging++.h	/^        virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
log	easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
log	libs/spdlog/details/async_log_helper.h	/^        log,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
log	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::log(const details::log_msg& msg)$/;"	f	class:spdlog::details::async_log_helper
log	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T& msg)$/;"	f	class:spdlog::logger
log	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
log	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char* msg)$/;"	f	class:spdlog::logger
log	libs/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::log(const details::log_msg& msg)$/;"	f	class:spdlog::sinks::ansicolor_sink
logBuilder	easylogging++.h	/^        inline LogBuilder* logBuilder(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
logDispatchCallback	easylogging++.h	/^            inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
logFlushThreshold	easylogging++.h	/^        inline std::size_t logFlushThreshold(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
logFormat	easylogging++.h	/^        inline const base::LogFormat& logFormat(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
logLine	easylogging++.h	/^            inline base::type::string_t logLine(void) { return m_logLine; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
logMessage	easylogging++.h	/^            inline LogMessage* logMessage(void) { return &m_logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
logMessage	easylogging++.h	/^        inline const LogMessage* logMessage(void) const { return m_logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
logStreamsReference	easylogging++.h	/^            inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
log_msg	libs/spdlog/details/log_msg.h	/^    log_msg(const std::string *loggers_name, level::level_enum lvl) : logger_name(loggers_name), level(lvl)$/;"	f	struct:spdlog::details::log_msg
log_msg	libs/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
logger	easylogging++.h	/^        inline Logger* logger(void) const { return m_logger; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
logger	libs/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, const It& begin, const It& end):$/;"	f	class:spdlog::logger
logger	libs/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, sinks_init_list sinks_list):$/;"	f	class:spdlog::logger
logger	libs/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, spdlog::sink_ptr single_sink):$/;"	f	class:spdlog::logger
logger	libs/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger_name	libs/spdlog/details/async_log_helper.h	/^        std::string logger_name;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
logger_name	libs/spdlog/details/log_msg.h	/^    const std::string *logger_name;$/;"	m	struct:spdlog::details::log_msg
long_double_value	libs/spdlog/fmt/bundled/format.h	/^        long double long_double_value;$/;"	m	union:fmt::internal::Value::__anon21
long_long_value	libs/spdlog/fmt/bundled/format.h	/^        LongLong long_long_value;$/;"	m	union:fmt::internal::Value::__anon21
m	Session.vim	/^nnoremap <silent> m :call signature#utils#Input()$/;"	m
m	Session.vim	/^nnoremap <silent> m  :call signature#mark#Purge("all")$/;"	m
m,	Session.vim	/^nnoremap <silent> m, :call signature#mark#Toggle("next")$/;"	m
m-	Session.vim	/^nnoremap <silent> m- :call signature#mark#Purge("line")$/;"	m
m.	Session.vim	/^nnoremap <silent> m. :call signature#mark#ToggleAtLine()$/;"	m
m/	Session.vim	/^nnoremap <silent> m\/ :call signature#mark#List(0, 0)$/;"	m
m<BS>	Session.vim	/^nnoremap <silent> m<BS> :call signature#marker#Purge()$/;"	m
m?	Session.vim	/^nnoremap <silent> m? :call signature#marker#List(v:count, 0)$/;"	m
mFreq	DataStructs.h	/^inline RealT mFreq(int freq,RealT beta) {$/;"	f
mRInd	DataStructs.h	/^inline RealT mRInd(const int freq, const RealT beta) {return (2*freq+1)*boost::math::constants::pi<RealT>()\/beta;}$/;"	f
mSet	GreensFct.hpp	/^		int mSet = 0;	\/\/ track whether matsuabra or iTime GF has been set$/;"	m	class:GreensFunction
m_asyncDispatchWorker	easylogging++.h	/^            base::IWorker* m_asyncDispatchWorker;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_asyncLogQueue	easylogging++.h	/^            base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_commandLineArgs	easylogging++.h	/^            base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_configurationFile	easylogging++.h	/^    std::string m_configurationFile;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
m_configurationType	easylogging++.h	/^        ConfigurationType m_configurationType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration::Predicate
m_configurationType	easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
m_configurations	easylogging++.h	/^        Configurations m_configurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_configurations	easylogging++.h	/^        Configurations* m_configurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_customFormatSpecifiers	easylogging++.h	/^            std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_dateTimeFormat	easylogging++.h	/^        std::string m_dateTimeFormat;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
m_defaultConfigurations	easylogging++.h	/^            Configurations m_defaultConfigurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
m_defaultLogBuilder	easylogging++.h	/^            LogBuilderPtr m_defaultLogBuilder;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
m_dispatchAction	easylogging++.h	/^        base::DispatchAction m_dispatchAction;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
m_dispatchData	easylogging++.h	/^            LogDispatchData m_dispatchData;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
m_enabled	easylogging++.h	/^        bool m_enabled;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Callback
m_enabledMap	easylogging++.h	/^        std::map<Level, bool> m_enabledMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_file	easylogging++.h	/^        std::string m_file;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_fileStreamMap	easylogging++.h	/^        std::map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_filename	easylogging++.h	/^            const char* m_filename;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter::Predicate
m_filename	easylogging++.h	/^        const char* m_filename;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
m_filenameMap	easylogging++.h	/^        std::map<Level, std::string> m_filenameMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_flags	easylogging++.h	/^            base::type::EnumType m_flags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_flags	easylogging++.h	/^        base::type::EnumType m_flags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
m_format	easylogging++.h	/^        base::type::string_t m_format;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
m_formatSpecifier	easylogging++.h	/^    const char* m_formatSpecifier;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::CustomFormatSpecifier
m_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class m_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
m_func	easylogging++.h	/^        std::string m_func;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_hitCounts	easylogging++.h	/^        std::size_t m_hitCounts;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
m_id	easylogging++.h	/^        std::string m_id;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_isConfigured	easylogging++.h	/^        bool m_isConfigured;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_isFromFile	easylogging++.h	/^    bool m_isFromFile;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
m_level	easylogging++.h	/^            base::type::VerboseLevel m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
m_level	easylogging++.h	/^        Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration::Predicate
m_level	easylogging++.h	/^        Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
m_level	easylogging++.h	/^        Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_level	easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
m_line	easylogging++.h	/^        unsigned long int m_line;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_lineNumber	easylogging++.h	/^            unsigned long int m_lineNumber;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter::Predicate
m_lineNumber	easylogging++.h	/^        unsigned long int m_lineNumber;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
m_logBuilder	easylogging++.h	/^        LogBuilderPtr m_logBuilder;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_logDispatchCallbacks	easylogging++.h	/^            std::map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_logFlushThresholdMap	easylogging++.h	/^        std::map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_logFormatMap	easylogging++.h	/^        std::map<Level, base::LogFormat> m_logFormatMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_logLine	easylogging++.h	/^            base::type::string_t m_logLine;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
m_logMessage	easylogging++.h	/^            LogMessage m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
m_logMessage	easylogging++.h	/^        LogMessage* m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
m_logStreamsReference	easylogging++.h	/^            base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
m_logStreamsReference	easylogging++.h	/^        base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_logStreamsReference	easylogging++.h	/^        base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_logger	easylogging++.h	/^        Logger* m_logger;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_loggingLevel	easylogging++.h	/^            Level m_loggingLevel;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_maxLogFileSizeMap	easylogging++.h	/^        std::map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_message	easylogging++.h	/^        base::type::string_t m_message;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_millisecondsWidthMap	easylogging++.h	/^        std::map<Level, base::MillisecondsWidth> m_millisecondsWidthMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_modules	easylogging++.h	/^            std::map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
m_mutex	easylogging++.h	/^                                        M* m_mutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
m_mutex	easylogging++.h	/^                                    base::threading::Mutex m_mutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
m_offset	easylogging++.h	/^                                int m_width; unsigned int m_offset;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
m_pFlags	easylogging++.h	/^            base::type::EnumType* m_pFlags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
m_parentApplicationName	easylogging++.h	/^        std::string m_parentApplicationName;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_performanceTrackingCallbacks	easylogging++.h	/^            std::map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrackingCallbacks;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_performanceTrackingMap	easylogging++.h	/^        std::map<Level, bool> m_performanceTrackingMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_preRollOutCallback	easylogging++.h	/^            PreRollOutCallback m_preRollOutCallback;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_queue	easylogging++.h	/^            std::queue<AsyncLogItem> m_queue;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
m_registeredHitCounters	easylogging++.h	/^            base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_registeredLoggers	easylogging++.h	/^            base::RegisteredLoggers* m_registeredLoggers;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_resolver	easylogging++.h	/^    FormatSpecifierValueResolver m_resolver;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::CustomFormatSpecifier
m_stream	easylogging++.h	/^        base::type::stringstream_t m_stream;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_toFileMap	easylogging++.h	/^        std::map<Level, bool> m_toFileMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_toStandardOutputMap	easylogging++.h	/^        std::map<Level, bool> m_toStandardOutputMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
m_typedConfigurations	easylogging++.h	/^        base::TypedConfigurations* m_typedConfigurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_underlyingMutex	easylogging++.h	/^                                        CRITICAL_SECTION m_underlyingMutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_underlyingMutex	easylogging++.h	/^                                        pthread_mutex_t m_underlyingMutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_unflushedCount	easylogging++.h	/^        std::map<Level, unsigned int> m_unflushedCount;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
m_userFormat	easylogging++.h	/^        base::type::string_t m_userFormat;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
m_vRegistry	easylogging++.h	/^            base::VRegistry* m_vRegistry;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
m_value	easylogging++.h	/^    std::string m_value;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
m_verboseLevel	easylogging++.h	/^        base::type::VerboseLevel m_verboseLevel;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
m_width	easylogging++.h	/^                                int m_width; unsigned int m_offset;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
magenta	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta    = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink
main	main.cpp	/^int main(int argc,char **argv)$/;"	f
main	test.cp	/^int main(int argc,char **argv)$/;"	f
main	test_sprng.cpp	/^main(int argc, char *argv[])$/;"	f
main2	test_SLEPc.cpp	/^int main2(int argc,char **argv)$/;"	f
make	libs/spdlog/fmt/bundled/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fmt::ArgArray
make	libs/spdlog/fmt/bundled/format.h	/^static Value make(const T &value)$/;"	f	namespace:fmt::internal
make_ptr	libs/spdlog/fmt/bundled/format.h	/^inline T *make_ptr(T *ptr, std::size_t)$/;"	f	namespace:fmt::internal
make_ptr	libs/spdlog/fmt/bundled/format.h	/^inline stdext::checked_array_iterator<T*> make_ptr(T *ptr, std::size_t size)$/;"	f	namespace:fmt::internal
make_type	libs/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fmt::internal
make_type	libs/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const Arg &first, const Args & ... tail)$/;"	f	namespace:fmt
make_type	libs/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fmt::internal
map_	libs/spdlog/fmt/bundled/format.h	/^    MapType map_;$/;"	m	class:fmt::internal::ArgMap
map_	libs/spdlog/fmt/bundled/format.h	/^    internal::ArgMap<Char> map_;$/;"	m	class:fmt::BasicFormatter
maxLogFileSize	easylogging++.h	/^        inline std::size_t maxLogFileSize(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
max_size_	libs/spdlog/details/mpmc_bounded_q.h	/^    size_t const max_size_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
mcUpdates	WeakCoupling.hpp	/^		unsigned int mcUpdates;			\/\/ $/;"	m	class:WeakCoupling
message	easylogging++.h	/^        inline const base::type::string_t& message(void) const { return m_message; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
millisecondsWidth	easylogging++.h	/^        inline const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
modules	easylogging++.h	/^            inline const std::map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
move	libs/spdlog/details/async_log_helper.h	/^                    msg_type(std::move(other.msg_type))$/;"	f	struct:spdlog::details::async_log_helper::async_msg
move	libs/spdlog/fmt/bundled/format.h	/^    void move(MemoryBuffer &other)$/;"	f	class:fmt::internal::MemoryBuffer
mpmc_bounded_queue	libs/spdlog/details/mpmc_bounded_q.h	/^    mpmc_bounded_queue(size_t buffer_size)$/;"	f	class:spdlog::details::mpmc_bounded_queue
mpmc_bounded_queue	libs/spdlog/details/mpmc_bounded_q.h	/^class mpmc_bounded_queue$/;"	c	namespace:spdlog::details
msg_type	libs/spdlog/details/async_log_helper.h	/^        async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
msleep	easylogging++.h	/^                                static inline void msleep(int) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
msvc_sink	libs/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink()$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	libs/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
msvc_sink_mt	libs/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<std::mutex> msvc_sink_mt;$/;"	t	namespace:spdlog::sinks
msvc_sink_st	libs/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<details::null_mutex> msvc_sink_st;$/;"	t	namespace:spdlog::sinks
mu	WeakCoupling.hpp	/^                const RealT mu;$/;"	m	class:WeakCoupling
n	StrongCoupling.h	/^                unsigned int n;                         \/\/ expansion order (number of used rows\/cols)$/;"	m	class:StrongCoupling
n	WeakCoupling.hpp	/^		unsigned int n; 			\/\/ expansion order (number of used rows\/cols)$/;"	m	class:WeakCoupling
name	easylogging++.h	/^                            const char* name;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon37
name	libs/spdlog/details/logger_impl.h	/^inline const std::string& spdlog::logger::name() const$/;"	f	class:spdlog::logger
name	libs/spdlog/fmt/bundled/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fmt::internal::NamedArg
name_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class name_formatter:public flag_formatter$/;"	c	namespace:spdlog::details::__anon3
newFileStream	easylogging++.h	/^                                    static base::type::fstream_t* newFileStream(const std::string& filename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
next	easylogging++.h	/^            inline AsyncLogItem next(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
next_arg	libs/spdlog/fmt/bundled/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
next_arg_index_	libs/spdlog/fmt/bundled/format.h	/^    int next_arg_index_;$/;"	m	class:fmt::internal::FormatterBase
now	libs/spdlog/details/os.h	/^inline spdlog::log_clock::time_point now()$/;"	f	namespace:spdlog::details::os
null_atomic_int	libs/spdlog/details/null_mutex.h	/^    null_atomic_int(int val):value(val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	libs/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_mutex	libs/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_sink	libs/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
null_sink_mt	libs/spdlog/sinks/null_sink.h	/^typedef null_sink<std::mutex> null_sink_mt;$/;"	t	namespace:spdlog::sinks
null_sink_st	libs/spdlog/sinks/null_sink.h	/^typedef null_sink<details::null_mutex> null_sink_st;$/;"	t	namespace:spdlog::sinks
numb	easylogging++.h	/^                            int numb;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon37
numeric_limits	libs/spdlog/fmt/bundled/format.h	/^class numeric_limits<fmt::internal::DummyInt> :$/;"	c	namespace:std
off	libs/spdlog/common.h	/^    off = 6$/;"	e	enum:spdlog::level::__anon2
on_blue	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue    = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_cyan	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan    = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_green	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green   = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_grey	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_grey    = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_magenta	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_red	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red     = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_white	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white   = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_yellow	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow  = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink
open	libs/spdlog/details/file_helper.h	/^    void open(const filename_t& fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper
open_interval	libs/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper
open_tries	libs/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper
operator !=	libs/spdlog/details/os.h	/^inline bool operator!=(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator !=	libs/spdlog/fmt/bundled/format.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator ()	GreensFct.hpp	/^		inline RealT operator() (const RealT t, int unsigned spin) const{$/;"	f	class:GreensFunction
operator ()	StrongCoupling.h	/^  		inline bool operator()(const SConfig& lhs, const SConfig& rhs) const {$/;"	f	struct:StrongCoupling::compare
operator ()	WeakCoupling.hpp	/^		  inline bool operator()(const SConfig& lhs, const SConfig& rhs) const {$/;"	f	struct:WeakCoupling::compare
operator ()	easylogging++.h	/^            inline bool operator()(const HitCounter* counter) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter::Predicate
operator ()	easylogging++.h	/^        inline bool operator()(const Configuration* conf) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration::Predicate
operator ()	libs/spdlog/fmt/bundled/format.h	/^    void operator()(Char *&buffer)$/;"	f	class:fmt::internal::ThousandsSep
operator ()	libs/spdlog/fmt/bundled/format.h	/^    void operator()(Char *) {}$/;"	f	struct:fmt::internal::NoThousandsSep
operator <	libs/spdlog/fmt/bundled/format.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <<	easylogging++.h	/^    friend inline base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
operator <<	easylogging++.h	/^    friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Loggable& loggable) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Loggable
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<($/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(fmt::BasicStringRef<Char> value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(int value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:BasicWriter
operator <<	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:BasicWriter
operator <=	libs/spdlog/fmt/bundled/format.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator =	easylogging++.h	/^        HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
operator =	easylogging++.h	/^        LogFormat& operator=(const LogFormat& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
operator =	easylogging++.h	/^        Logger& operator=(const Logger& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
operator =	easylogging++.h	/^    Configuration& operator=(const Configuration& c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
operator =	easylogging++.h	/^    Registry& operator=(const Registry& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
operator =	easylogging++.h	/^    RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
operator =	libs/spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
operator =	libs/spdlog/fmt/bundled/format.h	/^    MemoryBuffer &operator=(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
operator ==	easylogging++.h	/^                                bool operator==(const MillisecondsWidth& msWidth) { return m_width == msWidth.m_width && m_offset == msWidth.m_offset; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
operator ==	easylogging++.h	/^        inline bool operator==(const LogFormat& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
operator ==	easylogging++.h	/^    inline bool operator==(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::CustomFormatSpecifier
operator ==	libs/spdlog/details/os.h	/^inline bool operator==(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator ==	libs/spdlog/fmt/bundled/format.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >	libs/spdlog/fmt/bundled/format.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >=	libs/spdlog/fmt/bundled/format.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator StringRef	libs/spdlog/fmt/bundled/format.h	/^    operator StringRef() const$/;"	f	class:fmt::internal::UTF16ToUTF8
operator WStringRef	libs/spdlog/fmt/bundled/format.h	/^    operator WStringRef() const$/;"	f	class:fmt::internal::UTF8ToUTF16
operator []	libs/spdlog/fmt/bundled/format.h	/^    T &operator[](std::size_t index)$/;"	f	class:fmt::Buffer
operator []	libs/spdlog/fmt/bundled/format.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fmt::Buffer
operator []	libs/spdlog/fmt/bundled/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fmt::ArgList
operator int	libs/spdlog/fmt/bundled/format.h	/^    operator int() const$/;"	f	struct:fmt::internal::DummyInt
os	libs/spdlog/common.h	/^namespace os$/;"	n	namespace:spdlog::details
os	libs/spdlog/details/os.h	/^namespace os$/;"	n	namespace:spdlog::details
ostream_sink	libs/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream& os, bool force_flush=false) :_ostream(os), _force_flush(force_flush) {}$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	libs/spdlog/sinks/ostream_sink.h	/^class ostream_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ostream_sink_mt	libs/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<std::mutex> ostream_sink_mt;$/;"	t	namespace:spdlog::sinks
ostream_sink_st	libs/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<details::null_mutex> ostream_sink_st;$/;"	t	namespace:spdlog::sinks
ostream_t	easylogging++.h	/^            typedef std::wostream ostream_t;$/;"	t	namespace:el::base::type
other	libs/spdlog/details/async_log_helper.h	/^        async_msg& operator=(async_msg& other) = delete;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
other	libs/spdlog/details/log_msg.h	/^    log_msg& operator=(log_msg&& other) = delete;$/;"	m	struct:spdlog::details::log_msg
other	libs/spdlog/details/log_msg.h	/^    log_msg(const log_msg& other)  = delete;$/;"	m	struct:spdlog::details::log_msg
other	libs/spdlog/details/log_msg.h	/^    log_msg(log_msg&& other) = delete;$/;"	m	struct:spdlog::details::log_msg
other	libs/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink& operator=(const ansicolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
other	libs/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink(const ansicolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
overflow	libs/spdlog/fmt/bundled/ostream.h	/^    int_type overflow(int_type ch = traits_type::eof())$/;"	f	class:fmt::internal::FormatBuf
override	libs/spdlog/async_logger.h	/^    void _set_formatter(spdlog::formatter_ptr msg_formatter) override;$/;"	m	class:spdlog::async_logger
override	libs/spdlog/async_logger.h	/^    void _set_pattern(const std::string& pattern) override;$/;"	m	class:spdlog::async_logger
override	libs/spdlog/async_logger.h	/^    void _sink_it(details::log_msg& msg) override;$/;"	m	class:spdlog::async_logger
override	libs/spdlog/async_logger.h	/^    void flush() override;$/;"	m	class:spdlog::async_logger
override	libs/spdlog/formatter.h	/^    void format(details::log_msg& msg) override;$/;"	m	class:spdlog::pattern_formatter
override	libs/spdlog/sinks/ansicolor_sink.h	/^    virtual void flush() override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	libs/spdlog/sinks/ansicolor_sink.h	/^    virtual void log(const details::log_msg& msg) override;$/;"	m	class:spdlog::sinks::ansicolor_sink
p_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class p_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
pad	libs/spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<Char> pad($/;"	f	namespace:fmt
pad	libs/spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<wchar_t> pad($/;"	f	namespace:fmt
pad0_	libs/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad0_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad1_	libs/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad1_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad2_	libs/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad2_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad3_	libs/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad3_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad_n_join	libs/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, char sep)$/;"	f	namespace:spdlog::details
pad_n_join	libs/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, int v3, char sep)$/;"	f	namespace:spdlog::details
parentApplicationName	easylogging++.h	/^        inline const std::string& parentApplicationName(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
parseFromFile	easylogging++.h	/^        static bool parseFromFile(const std::string& configurationFile, Configurations* sender, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
parseFromFile	easylogging++.h	/^    inline bool parseFromFile(const std::string& configurationFile, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
parseFromFormat	easylogging++.h	/^        void parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
parseFromText	easylogging++.h	/^        static bool parseFromText(const std::string& configurationsString, Configurations* sender, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
parseFromText	easylogging++.h	/^    inline bool parseFromText(const std::string& configurationsString, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
parseLine	easylogging++.h	/^        static bool parseLine(std::string* line, std::string* currConfigStr, std::string* currLevelStr, Level* currLevel, Configurations* conf) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations::Parser
parse_flags	libs/spdlog/fmt/bundled/printf.h	/^void PrintfFormatter<Char, AF>::parse_flags(FormatSpec &spec, const Char *&s)$/;"	f	class:fmt::PrintfFormatter
parse_header	libs/spdlog/fmt/bundled/printf.h	/^unsigned PrintfFormatter<Char, AF>::parse_header($/;"	f	class:fmt::PrintfFormatter
pathExists	easylogging++.h	/^                                    static inline bool pathExists(const char* path, bool considerFile = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
pattern_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^inline spdlog::pattern_formatter::pattern_formatter(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
pattern_formatter	libs/spdlog/formatter.h	/^class pattern_formatter : public formatter$/;"	c	namespace:spdlog
performanceTracking	easylogging++.h	/^        inline bool performanceTracking(Level level = Level::Global) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
performanceTrackingCallback	easylogging++.h	/^            inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
plan	GreensFct.hpp	/^		fftw_plan plan;$/;"	m	class:GreensFunction
planMtoT	GreensFct.hpp	/^		fftw_plan planMtoT;$/;"	m	class:GreensFunction
planTtoM	GreensFct.hpp	/^		fftw_plan planTtoM;$/;"	m	class:GreensFunction
pointer	libs/spdlog/fmt/bundled/format.h	/^        const void *pointer;$/;"	m	union:fmt::internal::Value::__anon21
pop	easylogging++.h	/^            inline void pop(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
popConfig	WeakCoupling.hpp	/^			inline static void popConfig(SConfigL& l){$/;"	f	class:WeakCoupling
preRollOutCallback	easylogging++.h	/^            inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
precision	libs/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::AlignSpec
precision	libs/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::FormatSpec
precision	libs/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::TypeSpec
precision_	libs/spdlog/fmt/bundled/format.h	/^    int precision_;$/;"	m	struct:fmt::FormatSpec
prepare_int_buffer	libs/spdlog/fmt/bundled/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits,$/;"	f	class:BasicWriter
prepare_int_buffer	libs/spdlog/fmt/bundled/format.h	/^BasicWriter<Char>::prepare_int_buffer($/;"	f	class:BasicWriter
print	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void print(CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt
print	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void print(std::FILE *f, CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt
print	libs/spdlog/fmt/bundled/ostream.cc	/^FMT_FUNC void print(std::ostream &os, CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt
print_colored	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void print_colored(Color c, CStringRef format, ArgList args) {$/;"	f	namespace:fmt
printf	libs/spdlog/fmt/bundled/printf.h	/^inline int printf(CStringRef format, ArgList args)$/;"	f	namespace:fmt
printf	libs/spdlog/fmt/bundled/printf.h	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args)$/;"	f	namespace:fmt
process_next_msg	libs/spdlog/details/async_log_helper.h	/^inline bool spdlog::details::async_log_helper::process_next_msg(log_clock::time_point& last_pop, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
ptr_	libs/spdlog/fmt/bundled/format.h	/^    T *ptr_;$/;"	m	class:fmt::Buffer
push	easylogging++.h	/^            inline void push(const AsyncLogItem& item) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
pushConfig	StrongCoupling.h	/^        inline static void pushConfig(SConfigL& l, const SConfig& c){$/;"	f	class:StrongCoupling
pushConfig	WeakCoupling.hpp	/^			inline static void pushConfig(SConfigL& l, const SConfig& c){$/;"	f	class:WeakCoupling
pushConfig	WeakCoupling.hpp	/^			inline static void pushConfig(SConfigL& l,const SConfig& c){$/;"	f	class:WeakCoupling
push_back	libs/spdlog/fmt/bundled/format.h	/^    void push_back(const T &value)$/;"	f	class:fmt::Buffer
push_msg	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::push_msg(details::async_log_helper::async_msg&& new_msg)$/;"	f	class:spdlog::details::async_log_helper
r_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class r_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
raw	libs/spdlog/details/log_msg.h	/^    fmt::MemoryWriter raw;$/;"	m	struct:spdlog::details::log_msg
rebuildM	WeakCoupling.cpp	/^MatrixT WeakCoupling::rebuildM(int spin)$/;"	f	class:WeakCoupling
reconfigure	easylogging++.h	/^        inline void reconfigure(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
red	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string red        = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink
register_logger	libs/spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog::details::registry_t
register_logger	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog
registeredLoggers	easylogging++.h	/^            inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
registry	libs/spdlog/details/registry.h	/^typedef registry_t<spdlog::details::null_mutex> registry;$/;"	t	namespace:spdlog::details
registry	libs/spdlog/details/registry.h	/^typedef registry_t<std::mutex> registry;$/;"	t	namespace:spdlog::details
registry_t	libs/spdlog/details/registry.h	/^    registry_t<Mutex>() {}$/;"	f	class:spdlog::details::registry_t
registry_t	libs/spdlog/details/registry.h	/^template <class Mutex> class registry_t$/;"	c	namespace:spdlog::details
remove	easylogging++.h	/^            bool remove(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
remove	libs/spdlog/details/os.h	/^inline int remove(const filename_t &filename)$/;"	f	namespace:spdlog::details::os
removeFlag	easylogging++.h	/^                                static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
removeFlag	easylogging++.h	/^            inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
remove_sink	libs/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
rename	libs/spdlog/details/os.h	/^inline int rename(const filename_t& filename1, const filename_t& filename2)$/;"	f	namespace:spdlog::details::os
reopen	libs/spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper
report_unhandled_arg	libs/spdlog/fmt/bundled/format.h	/^    void report_unhandled_arg() {}$/;"	f	class:fmt::ArgVisitor
report_unhandled_arg	libs/spdlog/fmt/bundled/printf.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::PrecisionHandler
report_unhandled_arg	libs/spdlog/fmt/bundled/printf.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::WidthHandler
report_unknown_type	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void internal::report_unknown_type(char code, const char *type) {$/;"	f	class:fmt::internal
reserve	libs/spdlog/fmt/bundled/format.h	/^    void reserve(std::size_t capacity)$/;"	f	class:fmt::Buffer
reset	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string reset      = "\\033[00m";$/;"	m	class:spdlog::sinks::ansicolor_sink
resetLocation	easylogging++.h	/^        inline void resetLocation(const char* filename, unsigned long int lineNumber) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
resize	libs/spdlog/fmt/bundled/format.h	/^    void resize(std::size_t new_size)$/;"	f	class:fmt::Buffer
resolveFilename	easylogging++.h	/^        std::string resolveFilename(const std::string& filename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
resolveLoggerFormatSpec	easylogging++.h	/^        void resolveLoggerFormatSpec(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
resolver	easylogging++.h	/^    inline const FormatSpecifierValueResolver& resolver(void) const { return m_resolver; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::CustomFormatSpecifier
reverse	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse    = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink
rotating_file_sink	libs/spdlog/sinks/file_sinks.h	/^    rotating_file_sink(const filename_t &base_filename, const filename_t &extension,$/;"	f	class:spdlog::sinks::rotating_file_sink
rotating_file_sink	libs/spdlog/sinks/file_sinks.h	/^class rotating_file_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
rotating_file_sink_mt	libs/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<std::mutex> rotating_file_sink_mt;$/;"	t	namespace:spdlog::sinks
rotating_file_sink_st	libs/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<details::null_mutex>rotating_file_sink_st;$/;"	t	namespace:spdlog::sinks
rotating_logger_mt	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_mt(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)$/;"	f	class:spdlog
rotating_logger_st	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_st(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)$/;"	f	class:spdlog
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 30) \/ 60)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
sBins	WeakCoupling.hpp	/^		Eigen::Array<RealT, _CONFIG_maxTBins,_CONFIG_spins> sBins; \/\/ TODO: larger amoun t of sBins?$/;"	m	class:WeakCoupling
sBinsSize	WeakCoupling.hpp	/^		const int sBinsSize;$/;"	m	class:WeakCoupling
safeDelete	easylogging++.h	/^                                safeDelete(T*& pointer) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
sep_	libs/spdlog/fmt/bundled/format.h	/^    fmt::StringRef sep_;$/;"	m	class:fmt::internal::ThousandsSep
sequence_	libs/spdlog/details/mpmc_bounded_q.h	/^        std::atomic<size_t>   sequence_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
set	easylogging++.h	/^    inline void set(Configuration* conf) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
set	easylogging++.h	/^    inline void set(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
setApplicationArguments	easylogging++.h	/^            void setApplicationArguments(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
setByMFreq	GreensFct.hpp	/^		inline void setByMFreq(const int n, const int spin, const ComplexT val)	{ g_wn(n,spin) = val; }$/;"	f	class:GreensFunction
setByT	GreensFct.hpp	/^		inline void setByT(const RealT t, const int spin, const RealT val)	{$/;"	f	class:GreensFunction
setDefaultConfigurations	easylogging++.h	/^            inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
setDispatchAction	easylogging++.h	/^        inline void setDispatchAction(base::DispatchAction dispatchAction) { m_dispatchAction = dispatchAction; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
setEnabled	easylogging++.h	/^        inline void setEnabled(bool enabled) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Callback
setFlags	easylogging++.h	/^            inline void setFlags(base::type::EnumType flags) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
setFromArgs	easylogging++.h	/^            void setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
setFromBase	easylogging++.h	/^    inline void setFromBase(Configurations* base) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
setGlobally	easylogging++.h	/^    inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
setGlobally	easylogging++.h	/^    void setGlobally(ConfigurationType configurationType, const std::string& value, bool includeGlobalLevel) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
setLevel	easylogging++.h	/^            inline void setLevel(base::type::VerboseLevel level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
setLogBuilder	easylogging++.h	/^        inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
setLogMessage	easylogging++.h	/^        inline void setLogMessage(LogMessage* logMessage) { m_logMessage = logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogDispatchData
setLoggingLevel	easylogging++.h	/^            inline void setLoggingLevel(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
setModules	easylogging++.h	/^            void setModules(const char* modules) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
setParentApplicationName	easylogging++.h	/^        inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
setPreRollOutCallback	easylogging++.h	/^            inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
setRemainingToDefault	easylogging++.h	/^    void setRemainingToDefault(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
setTByInd	GreensFct.hpp	/^		inline void setTByInd(const int i, const int spin, const RealT val) {$/;"	f	class:GreensFunction
setToDefault	easylogging++.h	/^    void setToDefault(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
setValue	easylogging++.h	/^        void setValue(Level level, const Conf_T& value, std::map<Level, Conf_T>* confMap, bool includeGlobalLevel = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
setValue	easylogging++.h	/^    inline void setValue(const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
set_async_mode	libs/spdlog/details/registry.h	/^    void set_async_mode(size_t q_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog::details::registry_t
set_async_mode	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_async_mode(size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog
set_color	libs/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::set_color(level::level_enum color_level, const std::string& color)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_error_handler	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::logger
set_error_handler	libs/spdlog/details/registry.h	/^    void set_error_handler(log_err_handler handler)$/;"	f	class:spdlog::details::registry_t
set_error_handler	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_error_handler(log_err_handler handler)$/;"	f	class:spdlog
set_force_flush	libs/spdlog/sinks/file_sinks.h	/^	void set_force_flush(bool force_flush)$/;"	f	class:spdlog::sinks::simple_file_sink
set_formatter	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::details::async_log_helper
set_formatter	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
set_formatter	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_formatter(spdlog::formatter_ptr f)$/;"	f	class:spdlog
set_level	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger
set_level	libs/spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry_t
set_level	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_level(level::level_enum log_level)$/;"	f	class:spdlog
set_level	libs/spdlog/sinks/sink.h	/^inline void sink::set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink
set_pattern	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(const std::string& pattern)$/;"	f	class:spdlog::logger
set_pattern	libs/spdlog/details/registry.h	/^    void set_pattern(const std::string& pattern)$/;"	f	class:spdlog::details::registry_t
set_pattern	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_pattern(const std::string& format_string)$/;"	f	class:spdlog
set_string	libs/spdlog/fmt/bundled/format.h	/^    void set_string(StringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	libs/spdlog/fmt/bundled/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fmt::internal::MakeValue
set_sync_mode	libs/spdlog/details/registry.h	/^    void set_sync_mode()$/;"	f	class:spdlog::details::registry_t
set_sync_mode	libs/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_sync_mode()$/;"	f	class:spdlog
sgn	DataStructs.h	/^inline int sgn(const T val) {return (T(0)< val) - (val < T(0));}$/;"	f
short_level_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class short_level_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
should_log	libs/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger
should_log	libs/spdlog/sinks/sink.h	/^inline bool sink::should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink
signbit	libs/spdlog/fmt/bundled/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fmt::internal
signs	WeakCoupling.hpp	/^		std::vector<int> signs;$/;"	m	class:WeakCoupling
simple_file_sink	libs/spdlog/sinks/file_sinks.h	/^    explicit simple_file_sink(const filename_t &filename, bool truncate = false):_force_flush(false)$/;"	f	class:spdlog::sinks::simple_file_sink
simple_file_sink	libs/spdlog/sinks/file_sinks.h	/^class simple_file_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
simple_file_sink_mt	libs/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<std::mutex> simple_file_sink_mt;$/;"	t	namespace:spdlog::sinks
simple_file_sink_st	libs/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<details::null_mutex> simple_file_sink_st;$/;"	t	namespace:spdlog::sinks
sink	libs/spdlog/sinks/sink.h	/^    sink(): _level( level::trace ) {}$/;"	f	class:spdlog::sinks::sink
sink	libs/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_	libs/spdlog/sinks/ansicolor_sink.h	/^    sink_ptr sink_;$/;"	m	class:spdlog::sinks::ansicolor_sink
sinks	libs/spdlog/common.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/details/logger_impl.h	/^inline const std::vector<spdlog::sink_ptr>& spdlog::logger::sinks() const$/;"	f	class:spdlog::logger
sinks	libs/spdlog/sinks/android_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/ansicolor_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/base_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/dist_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/file_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/msvc_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/null_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/ostream_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/stdout_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	libs/spdlog/sinks/syslog_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
size	libs/spdlog/details/file_helper.h	/^    size_t size()$/;"	f	class:spdlog::details::file_helper
size	libs/spdlog/fmt/bundled/format.h	/^        std::size_t size;$/;"	m	struct:fmt::internal::Value::StringValue
size	libs/spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF16ToUTF8
size	libs/spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF8ToUTF16
size	libs/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:BasicWriter
size	libs/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:FormatInt
size	libs/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicStringRef
size	libs/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::Buffer
size	libs/spdlog/fmt/bundled/ostream.h	/^    size_t size() const$/;"	f	class:fmt::internal::FormatBuf
size_	libs/spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::BasicStringRef
size_	libs/spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::Buffer
sleep_or_yield	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::sleep_or_yield(const spdlog::log_clock::time_point& now, const spdlog::log_clock::time_point& last_op_time)$/;"	f	class:spdlog::details::async_log_helper
spdlog	libs/spdlog/async_logger.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/common.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/async_log_helper.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/file_helper.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/log_msg.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/mpmc_bounded_q.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/null_mutex.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/os.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/pattern_formatter_impl.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/details/registry.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/formatter.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/logger.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/android_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/base_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/dist_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/file_sinks.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/msvc_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/null_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/ostream_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/stdout_sinks.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/sinks/syslog_sink.h	/^namespace spdlog$/;"	n
spdlog	libs/spdlog/spdlog.h	/^namespace spdlog$/;"	n
spdlog_ex	libs/spdlog/common.h	/^    spdlog_ex(const std::string& msg):_msg(msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	libs/spdlog/common.h	/^    spdlog_ex(const std::string& msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	libs/spdlog/common.h	/^class spdlog_ex: public std::exception$/;"	c	namespace:spdlog
spec	libs/spdlog/fmt/bundled/format.h	/^    FormatSpec &spec()$/;"	f	class:fmt::internal::ArgFormatterBase
spec_	libs/spdlog/fmt/bundled/format.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::ArgFormatterBase
spec_	libs/spdlog/fmt/bundled/printf.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::WidthHandler
sprintf	libs/spdlog/fmt/bundled/printf.h	/^inline std::string sprintf(CStringRef format, ArgList args)$/;"	f	namespace:fmt
sprintf	libs/spdlog/fmt/bundled/printf.h	/^inline std::wstring sprintf(WCStringRef format, ArgList args)$/;"	f	namespace:fmt
sstring	libs/spdlog/fmt/bundled/format.h	/^        StringValue<signed char> sstring;$/;"	m	union:fmt::internal::Value::__anon21
start_	libs/spdlog/fmt/bundled/ostream.h	/^    Char *start_;$/;"	m	class:fmt::internal::FormatBuf
std	libs/spdlog/fmt/bundled/format.h	/^namespace std$/;"	n
stderr_logger_mt	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_mt(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stderr_logger_st	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_st(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stderr_sink	libs/spdlog/sinks/stdout_sinks.h	/^    stderr_sink() {}$/;"	f	class:spdlog::sinks::stderr_sink
stderr_sink	libs/spdlog/sinks/stdout_sinks.h	/^class stderr_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
stderr_sink_mt	libs/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<std::mutex> stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
stderr_sink_st	libs/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<details::null_mutex> stderr_sink_st;$/;"	t	namespace:spdlog::sinks
stdout_logger_mt	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_mt(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stdout_logger_st	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_st(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stdout_sink	libs/spdlog/sinks/stdout_sinks.h	/^    stdout_sink() {}$/;"	f	class:spdlog::sinks::stdout_sink
stdout_sink	libs/spdlog/sinks/stdout_sinks.h	/^class stdout_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
stdout_sink_mt	libs/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<std::mutex> stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
stdout_sink_st	libs/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<details::null_mutex> stdout_sink_st;$/;"	t	namespace:spdlog::sinks
steps	StrongCoupling.h	/^                unsigned int steps;                     \/\/ number of updates$/;"	m	class:StrongCoupling
steps	WeakCoupling.hpp	/^		unsigned int steps;			\/\/ number of updates$/;"	m	class:WeakCoupling
store	libs/spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int
str	libs/spdlog/fmt/bundled/format.h	/^    const Char *str() const$/;"	f	class:fmt::StrFormatSpec
str	libs/spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:BasicWriter
str	libs/spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:FormatInt
str	libs/spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
str	libs/spdlog/fmt/bundled/format.h	/^    std::wstring str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
str_	libs/spdlog/fmt/bundled/format.h	/^    char *str_;$/;"	m	class:FormatInt
str_	libs/spdlog/fmt/bundled/format.h	/^    const Char *str_;$/;"	m	class:fmt::StrFormatSpec
stream	easylogging++.h	/^        inline base::type::stringstream_t& stream(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
strerror_r	libs/spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_r(int, char *, ...) {$/;"	f	file:
strerror_s	libs/spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_s(char *, std::size_t, ...) {$/;"	f	file:
string	libs/spdlog/fmt/bundled/format.h	/^        StringValue<char> string;$/;"	m	union:fmt::internal::Value::__anon21
string_t	easylogging++.h	/^            typedef std::wstring string_t;$/;"	t	namespace:el::base::type
stringstream_t	easylogging++.h	/^            typedef std::wstringstream stringstream_t;$/;"	t	namespace:el::base::type
swapConfigs	WeakCoupling.hpp	/^			inline static void swapConfigs(SConfigL& l, const int pos1, const int pos2){$/;"	f	class:WeakCoupling
syslog_logger	libs/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::syslog_logger(const std::string& logger_name, const std::string& syslog_ident, int syslog_option)$/;"	f	class:spdlog
syslog_prio_from_level	libs/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	libs/spdlog/sinks/syslog_sink.h	/^    syslog_sink(const std::string& ident = "", int syslog_option=0, int syslog_facility=LOG_USER):$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	libs/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public sink$/;"	c	namespace:spdlog::sinks
t	test.cp	/^  PetscReal t[NOBSERVATIONS];   \/* array of independent variables of observation *\/$/;"	m	struct:__anon1	file:
tIndex	GreensFct.hpp	/^		inline int tIndex(const RealT t) const {$/;"	f	class:GreensFunction
tSet	GreensFct.hpp	/^		int tSet = 0;	\/\/ TODO implement$/;"	m	class:GreensFunction
t_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class t_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
thousands_sep	libs/spdlog/fmt/bundled/format.h	/^inline StringRef thousands_sep($/;"	f	namespace:fmt::internal
thousands_sep	libs/spdlog/fmt/bundled/format.h	/^inline fmt::StringRef thousands_sep(...)$/;"	f	namespace:fmt::internal
thread_id	libs/spdlog/details/async_log_helper.h	/^        size_t thread_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
thread_id	libs/spdlog/details/log_msg.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::log_msg
thread_id	libs/spdlog/details/os.h	/^inline size_t thread_id()$/;"	f	namespace:spdlog::details::os
threading	easylogging++.h	/^                            namespace threading {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
throw_if_exists	libs/spdlog/details/registry.h	/^    void throw_if_exists(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t
time	libs/spdlog/details/async_log_helper.h	/^        log_clock::time_point time;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
time	libs/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg
to12h	libs/spdlog/details/pattern_formatter_impl.h	/^static int to12h(const tm& t)$/;"	f	namespace:spdlog::details
toFile	easylogging++.h	/^        inline bool toFile(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
toStandardOutput	easylogging++.h	/^        inline bool toStandardOutput(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
to_short_str	libs/spdlog/common.h	/^inline const char* to_short_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_str	libs/spdlog/common.h	/^inline const char* to_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_string	libs/spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fmt::BasicStringRef
to_unsigned	libs/spdlog/fmt/bundled/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fmt::internal
totalSign	WeakCoupling.hpp	/^		int totalSign;$/;"	m	class:WeakCoupling
trace	libs/spdlog/common.h	/^    trace = 0,$/;"	e	enum:spdlog::level::__anon2
trace	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const T& msg)$/;"	f	class:spdlog::logger
trace	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
traits_type	libs/spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fmt::internal::FormatBuf
transformMtoT	GreensFct.cpp	/^void GreensFct::transformMtoT(void){};$/;"	f	class:GreensFct
transformTtoM	GreensFct.cpp	/^void GreensFct::transformTtoM(void){};$/;"	f	class:GreensFct
try_lock	easylogging++.h	/^                                        inline bool try_lock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
try_lock	libs/spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex
txt	libs/spdlog/details/async_log_helper.h	/^        std::string txt;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
type	easylogging++.h	/^        namespace type {$/;"	n	namespace:el::base
type	libs/spdlog/fmt/bundled/format.h	/^    Type type;$/;"	m	struct:fmt::internal::Arg
type	libs/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::AlignTypeSpec
type	libs/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::FormatSpec
type	libs/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::TypeSpec
type	libs/spdlog/fmt/bundled/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fmt::ArgList
type	libs/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fmt::internal::MakeValue
type	libs/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const T &)$/;"	f	class:fmt::internal::MakeValue
type	libs/spdlog/fmt/bundled/format.h	/^    static uint64_t type(long)$/;"	f	class:fmt::internal::MakeValue
type	libs/spdlog/fmt/bundled/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fmt::internal::MakeValue
type	libs/spdlog/fmt/bundled/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fmt::internal::MakeValue
type	libs/spdlog/fmt/bundled/format.h	/^    typedef F type;$/;"	t	struct:fmt::internal::Conditional
type	libs/spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::Conditional
type	libs/spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::EnableIf
type	libs/spdlog/fmt/bundled/format.h	/^    uint64_t type;$/;"	m	struct:fmt::ArgType
type_	libs/spdlog/fmt/bundled/format.h	/^    char type_;$/;"	m	struct:fmt::FormatSpec
type_	libs/spdlog/fmt/bundled/printf.h	/^    wchar_t type_;$/;"	m	class:fmt::internal::ArgConverter
typedConfigurations	easylogging++.h	/^        inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
types_	libs/spdlog/fmt/bundled/format.h	/^    uint64_t types_;$/;"	m	class:fmt::ArgList
uint32_t	libs/spdlog/fmt/bundled/format.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	libs/spdlog/fmt/bundled/format.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint_value	libs/spdlog/fmt/bundled/format.h	/^        unsigned uint_value;$/;"	m	union:fmt::internal::Value::__anon21
ulong_long_value	libs/spdlog/fmt/bundled/format.h	/^        ULongLong ulong_long_value;$/;"	m	union:fmt::internal::Value::__anon21
underline	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string underline  = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink
uninstallCustomFormatSpecifier	easylogging++.h	/^            inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
uninstallLogDispatchCallback	easylogging++.h	/^            inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
uninstallPerformanceTrackingCallback	easylogging++.h	/^            inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
unit	easylogging++.h	/^                            const base::type::char_t* unit;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon36
unlock	easylogging++.h	/^                                        inline void unlock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
unlock	libs/spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex
unregister	easylogging++.h	/^            inline void unregister(Logger*& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
unregister	easylogging++.h	/^inline void unregister(const T_Key& uniqKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
unsafeFlushAll	easylogging++.h	/^            inline void unsafeFlushAll(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
unsafeGetConfigByRef	easylogging++.h	/^        inline Conf_T& unsafeGetConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
unsafeGetConfigByVal	easylogging++.h	/^        inline Conf_T unsafeGetConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
unsafeSet	easylogging++.h	/^    void unsafeSet(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
unsafeSetGlobally	easylogging++.h	/^    void unsafeSetGlobally(ConfigurationType configurationType, const std::string& value, bool includeGlobalLevel) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
unsafeSetIfNotExist	easylogging++.h	/^    void unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
unsafeValidateFileRolling	easylogging++.h	/^        bool unsafeValidateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
unsetPreRollOutCallback	easylogging++.h	/^            inline void unsetPreRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
update	StrongCoupling.cpp	/^int StrongCoupling::update(const RealT U,const RealT beta)$/;"	f	class:StrongCoupling
update	WeakCoupling.cpp	/^int WeakCoupling::update(void)$/;"	f	class:WeakCoupling
update	test_WeakCoulping.cpp	/^int WeakCoupling::update(SConfigL& confs, MatrixT& M, MatrixT& G0, const double U,const double beta)$/;"	f	class:WeakCoupling
updateContribution	WeakCoupling.cpp	/^void WeakCoupling::updateContribution(int sign)$/;"	f	class:WeakCoupling
updateTests	test_WeakCoupling.cpp	/^void updateTests(){$/;"	f
userFormat	easylogging++.h	/^        inline const base::type::string_t& userFormat(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
ustring	libs/spdlog/fmt/bundled/format.h	/^        StringValue<unsigned char> ustring;$/;"	m	union:fmt::internal::Value::__anon21
utc_minutes_offset	libs/spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm& tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os
utils	easylogging++.h	/^                            namespace utils {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
vModulesEnabled	easylogging++.h	/^            inline bool vModulesEnabled(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::VRegistry
vRegistry	easylogging++.h	/^            inline base::VRegistry* vRegistry(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
v_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class v_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
validateAfterN	easylogging++.h	/^        bool validateAfterN(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::RegisteredHitCounters
validateAfterNCounter	easylogging++.h	/^            inline bool validateAfterNCounter(const char* filename, unsigned long int lineNumber, std::size_t n) { \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
validateEveryN	easylogging++.h	/^        bool validateEveryN(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::RegisteredHitCounters
validateEveryNCounter	easylogging++.h	/^            inline bool validateEveryNCounter(const char* filename, unsigned long int lineNumber, std::size_t occasion) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
validateFileRolling	easylogging++.h	/^        bool validateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
validateHitCounts	easylogging++.h	/^        inline void validateHitCounts(std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
validateNTimes	easylogging++.h	/^        bool validateNTimes(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::RegisteredHitCounters
validateNTimesCounter	easylogging++.h	/^            inline bool validateNTimesCounter(const char* filename, unsigned long int lineNumber, std::size_t n) { \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
value	easylogging++.h	/^                            double value;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon36
value	easylogging++.h	/^    inline const std::string& value(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
value	libs/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int
value	libs/spdlog/fmt/bundled/format.h	/^        const Char *value;$/;"	m	struct:fmt::internal::Value::StringValue
value	libs/spdlog/fmt/bundled/format.h	/^        const void *value;$/;"	m	struct:fmt::internal::Value::CustomValue
value	libs/spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon24
value	libs/spdlog/fmt/bundled/format.h	/^    T value() const$/;"	f	class:fmt::IntFormatSpec
value	libs/spdlog/fmt/bundled/format.h	/^    enum { value = 0 };$/;"	e	enum:fmt::internal::False::__anon29
value	libs/spdlog/fmt/bundled/format.h	/^    enum { value = 0 };$/;"	e	enum:fmt::internal::Not::__anon27
value	libs/spdlog/fmt/bundled/format.h	/^    enum { value = 1 };$/;"	e	enum:fmt::internal::Not::__anon28
value	libs/spdlog/fmt/bundled/format.h	/^    enum { value = ConvertToIntImpl2<T, enable_conversion>::value };$/;"	e	enum:fmt::internal::ConvertToInt::__anon26
value	libs/spdlog/fmt/bundled/format.h	/^    enum { value = ENABLE_CONVERSION };$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon22
value	libs/spdlog/fmt/bundled/format.h	/^    enum { value = false };$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon23
value	libs/spdlog/fmt/bundled/ostream.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon35
value	libs/spdlog/fmt/bundled/printf.h	/^    enum { value = 0 };$/;"	e	enum:fmt::internal::is_same::__anon4
value	libs/spdlog/fmt/bundled/printf.h	/^    enum { value = 1 };$/;"	e	enum:fmt::internal::is_same::__anon5
value_	libs/spdlog/fmt/bundled/format.h	/^    T value_;$/;"	m	class:fmt::IntFormatSpec
values_	libs/spdlog/fmt/bundled/format.h	/^        const internal::Value *values_;$/;"	m	union:fmt::ArgList::__anon30
verboseLevel	easylogging++.h	/^        inline base::type::VerboseLevel verboseLevel(void) const { return m_verboseLevel; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogMessage
visit	libs/spdlog/fmt/bundled/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fmt::ArgVisitor
visit_any_double	libs/spdlog/fmt/bundled/format.h	/^    Result visit_any_double(T)$/;"	f	class:fmt::ArgVisitor
visit_any_double	libs/spdlog/fmt/bundled/format.h	/^    void visit_any_double(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	libs/spdlog/fmt/bundled/format.h	/^    Result visit_any_int(T)$/;"	f	class:fmt::ArgVisitor
visit_any_int	libs/spdlog/fmt/bundled/format.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	libs/spdlog/fmt/bundled/printf.h	/^    bool visit_any_int(T value)$/;"	f	class:fmt::internal::IsZeroInt
visit_any_int	libs/spdlog/fmt/bundled/printf.h	/^    int visit_any_int(T value)$/;"	f	class:fmt::internal::PrecisionHandler
visit_any_int	libs/spdlog/fmt/bundled/printf.h	/^    unsigned visit_any_int(T value)$/;"	f	class:fmt::internal::WidthHandler
visit_any_int	libs/spdlog/fmt/bundled/printf.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::CharConverter
visit_any_int	libs/spdlog/fmt/bundled/printf.h	/^    void visit_any_int(U value)$/;"	f	class:fmt::internal::ArgConverter
visit_bool	libs/spdlog/fmt/bundled/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fmt::ArgVisitor
visit_bool	libs/spdlog/fmt/bundled/format.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_bool	libs/spdlog/fmt/bundled/printf.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_bool	libs/spdlog/fmt/bundled/printf.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgConverter
visit_char	libs/spdlog/fmt/bundled/format.h	/^    Result visit_char(int value)$/;"	f	class:fmt::ArgVisitor
visit_char	libs/spdlog/fmt/bundled/format.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_char	libs/spdlog/fmt/bundled/printf.h	/^    void visit_char(int value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_cstring	libs/spdlog/fmt/bundled/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fmt::ArgVisitor
visit_cstring	libs/spdlog/fmt/bundled/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_cstring	libs/spdlog/fmt/bundled/printf.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_custom	libs/spdlog/fmt/bundled/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fmt::ArgVisitor
visit_custom	libs/spdlog/fmt/bundled/format.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicArgFormatter
visit_custom	libs/spdlog/fmt/bundled/printf.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_double	libs/spdlog/fmt/bundled/format.h	/^    Result visit_double(double value)$/;"	f	class:fmt::ArgVisitor
visit_int	libs/spdlog/fmt/bundled/format.h	/^    Result visit_int(int value)$/;"	f	class:fmt::ArgVisitor
visit_long_double	libs/spdlog/fmt/bundled/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fmt::ArgVisitor
visit_long_long	libs/spdlog/fmt/bundled/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fmt::ArgVisitor
visit_pointer	libs/spdlog/fmt/bundled/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fmt::ArgVisitor
visit_pointer	libs/spdlog/fmt/bundled/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_pointer	libs/spdlog/fmt/bundled/printf.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_string	libs/spdlog/fmt/bundled/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fmt::ArgVisitor
visit_string	libs/spdlog/fmt/bundled/format.h	/^    void visit_string(Arg::StringValue<char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_uint	libs/spdlog/fmt/bundled/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fmt::ArgVisitor
visit_ulong_long	libs/spdlog/fmt/bundled/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fmt::ArgVisitor
visit_unhandled_arg	libs/spdlog/fmt/bundled/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fmt::ArgVisitor
visit_wstring	libs/spdlog/fmt/bundled/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fmt::ArgVisitor
visit_wstring	libs/spdlog/fmt/bundled/format.h	/^    void visit_wstring(Arg::StringValue<Char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
wait_empty_q	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::wait_empty_q()$/;"	f	class:spdlog::details::async_log_helper
warn	libs/spdlog/common.h	/^    warn = 3,$/;"	e	enum:spdlog::level::__anon2
warn	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const T& msg)$/;"	f	class:spdlog::logger
warn	libs/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
weissGreensFunct	test_WeakCoulping.cpp	/^double WeakCoupling::weissGreensFunct(const double tau,const int& sigma){$/;"	f	class:WeakCoupling
white	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string white      = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink
width	libs/spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::TypeSpec
width	libs/spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::WidthSpec
width_	libs/spdlog/fmt/bundled/format.h	/^    unsigned width_;$/;"	m	struct:fmt::WidthSpec
worker_loop	libs/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::worker_loop()$/;"	f	class:spdlog::details::async_log_helper
write	libs/spdlog/details/file_helper.h	/^    void write(const log_msg& msg)$/;"	f	class:spdlog::details::file_helper
write	libs/spdlog/fmt/bundled/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:BasicWriter
write	libs/spdlog/fmt/bundled/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fmt::internal::FormatterBase
write	libs/spdlog/fmt/bundled/format.h	/^    void write(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	libs/spdlog/fmt/bundled/format.h	/^    void write(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	libs/spdlog/fmt/bundled/ostream.cc	/^FMT_FUNC void write(std::ostream &os, Writer &w) {$/;"	f	namespace:fmt::internal
writeToFile	IOhelper.cpp	/^int IOhelper::writeToFile(GreensFct g, char* filename){$/;"	f	class:IOhelper
write_decimal	libs/spdlog/fmt/bundled/format.h	/^    void write_decimal(Int value)$/;"	f	class:BasicWriter
write_double	libs/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_double(T value, const FormatSpec &spec)$/;"	f	class:BasicWriter
write_int	libs/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:BasicWriter
write_null_pointer	libs/spdlog/fmt/bundled/printf.h	/^    void write_null_pointer()$/;"	f	class:fmt::BasicPrintfArgFormatter
write_pointer	libs/spdlog/fmt/bundled/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fmt::internal::ArgFormatterBase
write_str	libs/spdlog/fmt/bundled/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	libs/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_unsigned_decimal	libs/spdlog/fmt/bundled/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:BasicWriter
writer	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::BasicFormatter
writer	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::internal::ArgFormatterBase
writer_	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::BasicFormatter
writer_	libs/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::internal::ArgFormatterBase
writer_	libs/spdlog/fmt/bundled/printf.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::PrintfFormatter
wstring	libs/spdlog/fmt/bundled/format.h	/^        StringValue<wchar_t> wstring;$/;"	m	union:fmt::internal::Value::__anon21
y	test.cp	/^  PetscReal y[NOBSERVATIONS];   \/* array of dependent variables *\/$/;"	m	struct:__anon1	file:
yellow	libs/spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow     = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink
z_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^    z_formatter():_last_update(std::chrono::seconds(0))$/;"	f	class:spdlog::details::z_formatter
z_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^class z_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
zeroShift	StrongCoupling.h	/^                const RealT zeroShift;                  \/\/ auxiliary ising shift$/;"	m	class:StrongCoupling
zeroShift	WeakCoupling.hpp	/^		const RealT zeroShift;			\/\/ auxiliary ising shift$/;"	m	class:WeakCoupling
zt	Session.vim	/^normal! zt$/;"	m
{	Session.vim	/^inoremap {$/;"	m
~AsyncLogItem	easylogging++.h	/^            virtual ~AsyncLogItem() {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogItem
~AsyncLogQueue	easylogging++.h	/^            virtual ~AsyncLogQueue() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::AsyncLogQueue
~BasicWriter	libs/spdlog/fmt/bundled/format.h	/^    virtual ~BasicWriter() {}$/;"	f	class:BasicWriter
~Buffer	libs/spdlog/fmt/bundled/format.h	/^    virtual ~Buffer() {}$/;"	f	class:fmt::Buffer
~Configuration	easylogging++.h	/^    virtual ~Configuration(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configuration
~Configurations	easylogging++.h	/^    virtual ~Configurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Configurations
~FormatError	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC FormatError::~FormatError() throw() {}$/;"	f	class:fmt::FormatError
~GreensFunction	GreensFct.hpp	/^		~GreensFunction(){$/;"	f	class:GreensFunction
~HitCounter	easylogging++.h	/^        virtual ~HitCounter(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::HitCounter
~IWorker	easylogging++.h	/^            virtual ~IWorker() {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::IWorker
~LogBuilder	easylogging++.h	/^        virtual ~LogBuilder(void) { ELPP_INTERNAL_INFO(3, "Destroying log builder...")}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogBuilder
~LogFormat	easylogging++.h	/^        virtual ~LogFormat(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::LogFormat
~Loggable	easylogging++.h	/^    virtual ~Loggable(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::Loggable
~Logger	easylogging++.h	/^        virtual ~Logger(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::Logger
~MemoryBuffer	libs/spdlog/fmt/bundled/format.h	/^    ~MemoryBuffer()$/;"	f	class:fmt::internal::MemoryBuffer
~Mutex	easylogging++.h	/^                                        virtual ~Mutex(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
~RegisteredLoggers	easylogging++.h	/^            virtual ~RegisteredLoggers(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::RegisteredLoggers
~Registry	easylogging++.h	/^    virtual ~Registry(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Registry
~RegistryWithPred	easylogging++.h	/^    virtual ~RegistryWithPred(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::RegistryWithPred
~RuntimeError	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::RuntimeError::~RuntimeError() throw() {}$/;"	f	class:fmt::internal::RuntimeError
~ScopedLock	easylogging++.h	/^                                        virtual ~ScopedLock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
~Storage	easylogging++.h	/^            virtual ~Storage(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::base::Storage
~StrongCoupling	StrongCoupling.cpp	/^StrongCoupling::~StrongCoupling()$/;"	f	class:StrongCoupling
~SystemError	libs/spdlog/fmt/bundled/format.cc	/^FMT_FUNC SystemError::~SystemError() throw() {}$/;"	f	class:fmt::SystemError
~ThreadSafe	easylogging++.h	/^                                    virtual ~ThreadSafe(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
~TypedConfigurations	easylogging++.h	/^        virtual ~TypedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::base::TypedConfigurations
~WeakCoupling	WeakCoupling.cpp	/^WeakCoupling::~WeakCoupling()$/;"	f	class:WeakCoupling
~WeakCoupling	test_WeakCoulping.cpp	/^WeakCoupling::~WeakCoupling()$/;"	f	class:WeakCoupling
~ansicolor_sink	libs/spdlog/sinks/ansicolor_sink.h	/^inline ansicolor_sink::~ansicolor_sink()$/;"	f	class:spdlog::sinks::ansicolor_sink
~async_log_helper	libs/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::~async_log_helper()$/;"	f	class:spdlog::details::async_log_helper
~file_helper	libs/spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~flag_formatter	libs/spdlog/details/pattern_formatter_impl.h	/^    virtual ~flag_formatter()$/;"	f	class:spdlog::details::flag_formatter
~formatter	libs/spdlog/formatter.h	/^    virtual ~formatter() {}$/;"	f	class:spdlog::formatter
~mpmc_bounded_queue	libs/spdlog/details/mpmc_bounded_q.h	/^    ~mpmc_bounded_queue()$/;"	f	class:spdlog::details::mpmc_bounded_queue
~sink	libs/spdlog/sinks/sink.h	/^    virtual ~sink() {}$/;"	f	class:spdlog::sinks::sink
~syslog_sink	libs/spdlog/sinks/syslog_sink.h	/^    ~syslog_sink()$/;"	f	class:spdlog::sinks::syslog_sink
